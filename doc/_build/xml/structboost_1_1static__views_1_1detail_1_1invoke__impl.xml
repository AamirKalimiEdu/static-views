<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structboost_1_1static__views_1_1detail_1_1invoke__impl" kind="struct" language="C++" prot="public">
    <compoundname>boost::static_views::detail::invoke_impl</compoundname>
    <includes refid="invoke_8hpp" local="no">invoke.hpp</includes>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1invoke__impl_1a4142df6f71a8f89ed1189f6f514ee660" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Function</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Object</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;            std::is_member_object_pointer&lt;Function(T::*)&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::detail::invoke_impl::call_impl</definition>
        <argsstring>(Function(T::*f), Object &amp;&amp;obj) invoke_member_data(f</argsstring>
        <name>call_impl</name>
        <param>
          <type>FunctionT::*</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Object &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1invoke__impl_1a16cf3fa42ce4583f2b541bab02f27c39" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Function</type>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Object</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;            std::is_member_function_pointer&lt;Function(T::*)&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::detail::invoke_impl::call_impl</definition>
        <argsstring>(Function(T::*f), Object &amp;&amp;obj, Args &amp;&amp;... args) invoke_member_func(f</argsstring>
        <name>call_impl</name>
        <param>
          <type>FunctionT::*</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Object &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1invoke__impl_1aee63f871e381103ab67afc45e9b5c0a1" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Function</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;            !std::is_member_pointer&lt;std::decay_t&lt;Function&gt;&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::detail::invoke_impl::call_impl</definition>
        <argsstring>(Function &amp;&amp;f, Args &amp;&amp;... args) invoke_nonmember(std</argsstring>
        <name>call_impl</name>
        <param>
          <type>Function &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" line="214" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" bodystart="214" bodyend="219"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1invoke__impl_1a4a9d91ae1d44477c5e0b1564ca7b6b30" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::detail::invoke_impl::std::forward</definition>
        <argsstring>(obj))(whenever possible)</argsstring>
        <name>std::forward</name>
        <param>
          <type>obj</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" line="191" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1invoke__impl_1adfed56a6634522d7570650dc7d806456" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::detail::invoke_impl::std::forward</definition>
        <argsstring>(obj)</argsstring>
        <name>std::forward</name>
        <param>
          <type>obj</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1invoke__impl_1aa89cf3d45fa47f2124be09419d81434d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::detail::invoke_impl::std::forward</definition>
        <argsstring>(args)...)(whenever possible)</argsstring>
        <name>std::forward</name>
        <param>
          <type>args</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" line="202" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" bodystart="207" bodyend="207"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1invoke__impl_1a18a88d1549bf1a56bb6aa56a4c3bcee1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Function</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::detail::invoke_impl::operator()</definition>
        <argsstring>(Function &amp;&amp;f, Args &amp;&amp;... args) const call_impl(std</argsstring>
        <name>operator()</name>
        <param>
          <type>Function &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" line="225" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" bodystart="225" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" line="183" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/invoke.hpp" bodystart="183" bodyend="230"/>
    <listofallmembers>
      <member refid="structboost_1_1static__views_1_1detail_1_1invoke__impl_1a4142df6f71a8f89ed1189f6f514ee660" prot="private" virt="non-virtual"><scope>boost::static_views::detail::invoke_impl</scope><name>call_impl</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1invoke__impl_1a16cf3fa42ce4583f2b541bab02f27c39" prot="private" virt="non-virtual"><scope>boost::static_views::detail::invoke_impl</scope><name>call_impl</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1invoke__impl_1aee63f871e381103ab67afc45e9b5c0a1" prot="private" virt="non-virtual"><scope>boost::static_views::detail::invoke_impl</scope><name>call_impl</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1invoke__impl_1a18a88d1549bf1a56bb6aa56a4c3bcee1" prot="public" virt="non-virtual"><scope>boost::static_views::detail::invoke_impl</scope><name>operator()</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1invoke__impl_1a4a9d91ae1d44477c5e0b1564ca7b6b30" prot="private" virt="non-virtual"><scope>boost::static_views::detail::invoke_impl</scope><name>std::forward</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1invoke__impl_1adfed56a6634522d7570650dc7d806456" prot="private" virt="non-virtual"><scope>boost::static_views::detail::invoke_impl</scope><name>std::forward</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1invoke__impl_1aa89cf3d45fa47f2124be09419d81434d" prot="private" virt="non-virtual"><scope>boost::static_views::detail::invoke_impl</scope><name>std::forward</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
