<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdetail_1_1hashed__impl" kind="struct" prot="public">
    <compoundname>detail::hashed_impl</compoundname>
    <basecompoundref refid="structview__adaptor__base" prot="public" virt="non-virtual">view_adaptor_base&lt; hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;, View &gt;</basecompoundref>
    <includes refid="hashed_8hpp" local="no">hashed.hpp</includes>
    <templateparamlist>
      <param>
        <type>std::size_t</type>
        <declname>BucketCount</declname>
        <defname>BucketCount</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>BucketSize</declname>
        <defname>BucketSize</defname>
      </param>
      <param>
        <type>class View</type>
      </param>
      <param>
        <type>class Hasher</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structdetail_1_1hashed__impl_1a8632faf1b0e6a0faf2a3d7a66c879f1f" prot="private" static="no" mutable="no">
        <type>Hasher</type>
        <definition>Hasher detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;::_hf</definition>
        <argsstring></argsstring>
        <name>_hf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="202" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdetail_1_1hashed__impl_1a225730503a245c4f6ffe63da88d26cc1" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;::_storage[bucket_count()*bucket_size()]</definition>
        <argsstring>[bucket_count()*bucket_size()]</argsstring>
        <name>_storage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="203" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdetail_1_1hashed__impl_1a01d5bdd38a24ad49cdc448dfd2f3af2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class HashFunction</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;::hashed_impl</definition>
        <argsstring>(View &amp;&amp;xs, HashFunction &amp;&amp;hf, std::size_t(&amp;storage)[BucketCount *BucketSize], std::index_sequence&lt; Is...&gt;) BOOST_STATIC_VIEWS_NOEXCEPT_IF(utils</argsstring>
        <name>hashed_impl</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>HashFunction &amp;&amp;</type>
          <declname>hf</declname>
        </param>
        <param>
          <type>std::size_t(&amp;)</type>
          <declname>storage</declname>
          <array>[BucketCount *BucketSize]</array>
        </param>
        <param>
          <type>std::index_sequence&lt; Is...&gt;</type>
        </param>
        <briefdescription>
<para>Constructs a hashed view of <computeroutput>xs</computeroutput> using <computeroutput>hf</computeroutput> as a hash function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BucketCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of buckets. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BucketSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Capacity of each bucket. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>View</parametername>
</parameternamelist>
<parameterdescription>
<para><verbatim>embed:rst:leading-slashes
/// Wrapper around a view, i.e. ``typename View::type`` is a view and
/// must model the :ref:`view &lt;view-concept&gt;` concept.
/// </verbatim> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Rvalue reference to a wrapper around a view. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash function to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of indices initialised by #hashed_init_impl.</para></parameterdescription>
</parameteritem>
</parameterlist>
<verbatim>embed:rst:leading-slashes
/// .. note::
///   This function requires an initialiser storage as an argument which
///   is an implementation detail. This constructor is thus not meant to
///   be used explicitly, use the :cpp:var:`hashed` factory function
///   instead.
/// </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="127" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="127" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1hashed__impl_1a6fa63d0e7cad2ad1e38d71682a90ef15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;::hash_function</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hash_function</name>
        <briefdescription>
<para>Returns a reference to the hash function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="169" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1hashed__impl_1ac715b4ccb7288d8a615fbfba25b9f0d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;::operator[]</definition>
        <argsstring>(std::size_t const hash) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t const</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Returns the bucket corresponding to <computeroutput>hash</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// This function is required by the :ref:`view &lt;view-concept&gt;`
/// concept. It returns a view of elements that have hash ``hash``.
/// If there are no such elements, the returned view will have size
/// zero.
/// </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="184" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="184" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structdetail_1_1hashed__impl_1afc14aa02e999360518806f6c00e78da2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;::bucket_count</definition>
        <argsstring>() noexcept</argsstring>
        <name>bucket_count</name>
        <briefdescription>
<para>Returns the number buckets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="143" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1hashed__impl_1a3de0f484e1b921fb36eb0b13dab6827a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;::bucket_size</definition>
        <argsstring>() noexcept</argsstring>
        <name>bucket_size</name>
        <briefdescription>
<para>Returns the capacity of each bucket. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="149" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1hashed__impl_1a261e4b2100432e6465c01619f735293f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;::capacity</definition>
        <argsstring>() noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Returns the capacity of the view. </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// This function is required by the :ref:`view &lt;view-concept&gt;`
/// concept. Hashed view is a view of buckets rather than individual
/// elements. This function is thus equivalent to
/// :cpp:func:`bucket_count() &lt;detail::hashed_impl::bucket_count()&gt;`.
/// </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="162" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="162" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="127">
        <label>detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;</label>
        <link refid="structdetail_1_1hashed__impl"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="129">
        <label>view_base</label>
        <link refid="structview__base"/>
      </node>
      <node id="128">
        <label>view_adaptor_base&lt; hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;, View &gt;</label>
        <link refid="structview__adaptor__base"/>
        <childnode refid="129" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="130">
        <label>detail::hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;</label>
        <link refid="structdetail_1_1hashed__impl"/>
        <childnode refid="131" relation="public-inheritance">
        </childnode>
      </node>
      <node id="132">
        <label>view_base</label>
        <link refid="structview__base"/>
      </node>
      <node id="131">
        <label>view_adaptor_base&lt; hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;, View &gt;</label>
        <link refid="structview__adaptor__base"/>
        <childnode refid="132" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="99" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="94" bodyend="204"/>
    <listofallmembers>
      <member refid="structdetail_1_1hashed__impl_1a8632faf1b0e6a0faf2a3d7a66c879f1f" prot="private" virt="non-virtual"><scope>detail::hashed_impl</scope><name>_hf</name></member>
      <member refid="structdetail_1_1hashed__impl_1a225730503a245c4f6ffe63da88d26cc1" prot="private" virt="non-virtual"><scope>detail::hashed_impl</scope><name>_storage</name></member>
      <member refid="structdetail_1_1hashed__impl_1afc14aa02e999360518806f6c00e78da2" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>bucket_count</name></member>
      <member refid="structdetail_1_1hashed__impl_1a3de0f484e1b921fb36eb0b13dab6827a" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>bucket_size</name></member>
      <member refid="structdetail_1_1hashed__impl_1a261e4b2100432e6465c01619f735293f" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>capacity</name></member>
      <member refid="structdetail_1_1hashed__impl_1a6fa63d0e7cad2ad1e38d71682a90ef15" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>hash_function</name></member>
      <member refid="structdetail_1_1hashed__impl_1a01d5bdd38a24ad49cdc448dfd2f3af2b" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>hashed_impl</name></member>
      <member refid="structview__adaptor__base_1a9fead4eeb8ce03baaa1b232c4cea0e8e" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>operator=</name></member>
      <member refid="structview__adaptor__base_1a22143f370952734cf4c80659929874b9" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>operator=</name></member>
      <member refid="structdetail_1_1hashed__impl_1ac715b4ccb7288d8a615fbfba25b9f0d2" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>operator[]</name></member>
      <member refid="structview__adaptor__base_1a0c839ea46bad2e630109fdacc47c2df8" prot="public" virt="non-virtual" ambiguityscope="view_adaptor_base&lt; hashed_impl&lt; BucketCount, BucketSize, View, Hasher &gt;, View &gt;::"><scope>detail::hashed_impl</scope><name>operator[]</name></member>
      <member refid="structview__adaptor__base_1a767124ab23a20fded7bc6edb7cbcaac1" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>parent</name></member>
      <member refid="structview__adaptor__base_1a5a27d8dea803e58a7699ca7189941cca" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>parent</name></member>
      <member refid="structview__adaptor__base_1a37bdf2676b001c4a6aa4f9ef2ed0a581" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>size</name></member>
      <member refid="structview__adaptor__base_1a081ca186c301145c8ca08674c9c83702" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>view_adaptor_base</name></member>
      <member refid="structview__adaptor__base_1a95d73d5dea98d1d9fb667e0de3d2db20" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>view_adaptor_base</name></member>
      <member refid="structview__adaptor__base_1a6b801b834ff65616ebd0b201bf2ccb08" prot="public" virt="non-virtual"><scope>detail::hashed_impl</scope><name>view_adaptor_base</name></member>
      <member refid="structview__adaptor__base_1a5a4854293c96582b2a65d3db30c9ce4c" prot="protected" virt="non-virtual"><scope>detail::hashed_impl</scope><name>view_adaptor_base_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
