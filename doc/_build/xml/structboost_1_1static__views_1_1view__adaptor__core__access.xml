<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structboost_1_1static__views_1_1view__adaptor__core__access" kind="struct" language="C++" prot="public">
    <compoundname>boost::static_views::view_adaptor_core_access</compoundname>
    <includes refid="view__base_8hpp" local="no">view_base.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structboost_1_1static__views_1_1view__adaptor__core__access_1aa9a23e5ee27b4f7d859fc7b650783d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct view_adaptor_base</definition>
        <argsstring></argsstring>
        <name>view_adaptor_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="65" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__core__access_1aec7f1dd938485e36aa5e162e1912038b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::view_adaptor_core_access::map</definition>
        <argsstring>(View const &amp;xs, std::size_t const i) xs.map(i)(whenever possible)</argsstring>
        <name>map</name>
        <param>
          <type>View const &amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="72" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="72" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Checks whether <computeroutput>V</computeroutput> models the View concept. </para>    </briefdescription>
    <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// Metafunction that returns whether ``V`` models the :ref:`View
/// &lt;view-concept&gt;` concept:
///
/// .. code-block:: cpp
///
///   template &lt;class View&gt;
///   struct is_view : std::is_base_of&lt;view_base, View&gt;
///   {};
///
/// </verbatim> Helper class one can befriend to give StaticViews access to the private <computeroutput>map</computeroutput> function. Defines a single private member function <programlisting><codeline><highlight class="normal">template<sp/>&lt;class<sp/>View&gt;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>constexpr<sp/>auto<sp/>map(View<sp/>const&amp;<sp/>xs,<sp/>std::size_t<sp/>const<sp/>i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>noexcept(<sp/>whenever<sp/>possible<sp/>);</highlight></codeline>
</programlisting> that calls <computeroutput>xs.map(i)</computeroutput>. By befriending this class, you give <ref refid="structboost_1_1static__views_1_1view__adaptor__base" kindref="compound">boost::static_views::view_adaptor_base</ref> access to private <computeroutput>map</computeroutput> function, but nothing else. The very same technique is used in <ulink url="http://www.boost.org/doc/libs/1_64_0/libs/iterator/doc/iterator_facade.html#iterator-core-access">Boost.Iterator</ulink>. </para>    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="63" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="63" bodyend="78"/>
    <listofallmembers>
      <member refid="structboost_1_1static__views_1_1view__adaptor__core__access_1aec7f1dd938485e36aa5e162e1912038b" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_core_access</scope><name>map</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__core__access_1aa9a23e5ee27b4f7d859fc7b650783d60" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_core_access</scope><name>view_adaptor_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
