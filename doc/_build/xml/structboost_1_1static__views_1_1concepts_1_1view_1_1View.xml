<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structboost_1_1static__views_1_1concepts_1_1view_1_1View" kind="struct" language="C++" prot="public">
    <compoundname>boost::static_views::concepts::view::View</compoundname>
    <basecompoundref refid="structboost_1_1static__views_1_1concepts_1_1all__" prot="public" virt="non-virtual">boost::static_views::concepts::all_&lt; Derives_from_view_base, Is_move_constructible, and_&lt; Has_static_extent, Has_correct_return_type_extent, Is_noexcept_extent &gt;, and_&lt; Has_member_size, Has_correct_return_type_size, Is_noexcept_size &gt;, Has_operator_access &gt;</basecompoundref>
    <includes refid="view__base_8hpp" local="no">view_base.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1concepts_1_1view_1_1View_1a1b6ed3de3bc224b0432198b79f6beb81" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::concepts::view::View::check</definition>
        <argsstring>() noexcept -&gt; bool</argsstring>
        <name>check</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="216" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="216" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1concepts_1_1view_1_1View_1aa2956e6abd0462e2f0d1e4a3bfb70910" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;                test&lt;std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;&gt;()&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::concepts::view::View::unsafe_at</definition>
        <argsstring>(T &amp;&amp;xs, std::size_t const i) unsafe_at_impl(std</argsstring>
        <name>unsafe_at</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="258" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="258" bodyend="262"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1concepts_1_1view_1_1View_1a9ad1964631d2490ca1fe97ea0ccffc4a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;<ref refid="structboost_1_1static__views_1_1concepts_1_1and__" kindref="compound">and_</ref>&lt;Has_unsafe_at,                Is_noexcept_unsafe_at&gt;::test&lt;T&gt;()&gt;</defval>
          </param>
          <param>
            <type>class</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::concepts::view::View::unsafe_at_impl</definition>
        <argsstring>(T &amp;&amp;xs, std::size_t const i) noexcept</argsstring>
        <name>unsafe_at_impl</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="232" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="232" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1concepts_1_1view_1_1View_1a4205c3068a700dd3c6c35590d0d14519" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;!<ref refid="structboost_1_1static__views_1_1concepts_1_1and__" kindref="compound">and_</ref>&lt;Has_unsafe_at,                Is_noexcept_unsafe_at&gt;::test&lt;T&gt;()&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::concepts::view::View::unsafe_at_impl</definition>
        <argsstring>(T &amp;&amp;xs, std::size_t const i) std</argsstring>
        <name>unsafe_at_impl</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="245" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="245" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="115">
        <label>boost::static_views::concepts::view::View</label>
        <link refid="structboost_1_1static__views_1_1concepts_1_1view_1_1View"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="116">
        <label>View_impl</label>
        <link refid="structboost_1_1static__views_1_1concepts_1_1all__"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="117">
        <label>boost::static_views::concepts::view::View</label>
        <link refid="structboost_1_1static__views_1_1concepts_1_1view_1_1View"/>
        <childnode refid="118" relation="public-inheritance">
        </childnode>
      </node>
      <node id="118">
        <label>View_impl</label>
        <link refid="structboost_1_1static__views_1_1concepts_1_1all__"/>
      </node>
    </collaborationgraph>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="211" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="211" bodyend="264"/>
    <listofallmembers>
      <member refid="structboost_1_1static__views_1_1concepts_1_1view_1_1View_1a1b6ed3de3bc224b0432198b79f6beb81" prot="public" virt="non-virtual"><scope>boost::static_views::concepts::view::View</scope><name>check</name></member>
      <member refid="structboost_1_1static__views_1_1concepts_1_1view_1_1View_1aa2956e6abd0462e2f0d1e4a3bfb70910" prot="public" virt="non-virtual"><scope>boost::static_views::concepts::view::View</scope><name>unsafe_at</name></member>
      <member refid="structboost_1_1static__views_1_1concepts_1_1view_1_1View_1a9ad1964631d2490ca1fe97ea0ccffc4a" prot="private" virt="non-virtual"><scope>boost::static_views::concepts::view::View</scope><name>unsafe_at_impl</name></member>
      <member refid="structboost_1_1static__views_1_1concepts_1_1view_1_1View_1a4205c3068a700dd3c6c35590d0d14519" prot="private" virt="non-virtual"><scope>boost::static_views::concepts::view::View</scope><name>unsafe_at_impl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
