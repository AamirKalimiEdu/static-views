<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl" kind="struct" language="C++" prot="private">
    <compoundname>boost::static_views::detail::find_first_i_impl::Constrains::Impl</compoundname>
    <templateparamlist>
      <param>
        <type>class Predicate</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1a6ccfb27303841b2f14b7c0c1c6053492" prot="public" static="no">
        <type>decltype(concepts::View::unsafe_at(std::declval&lt; T const  &amp; &gt;(), std::declval&lt; std::size_t &gt;()))</type>
        <definition>using boost::static_views::detail::find_first_i_impl::Constrains&lt; V, P &gt;::Impl&lt; Predicate &gt;::element_type_t =  decltype( concepts::View::unsafe_at(std::declval&lt;T const&amp;&gt;(), std::declval&lt;std::size_t&gt;()))</definition>
        <argsstring></argsstring>
        <name>element_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" line="29" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1af21a02b95400dd9d5fa3aa663832142e" prot="public" static="no">
        <type>decltype(<ref refid="namespaceboost_1_1static__views_1a68285f3a68a5b81c8969eb989371bf53" kindref="member">invoke</ref>(std::declval&lt; Predicate &gt;(), std::declval&lt; element_type_t&lt; T &gt; &gt;()))</type>
        <definition>using boost::static_views::detail::find_first_i_impl::Constrains&lt; V, P &gt;::Impl&lt; Predicate &gt;::has_call_t =  decltype(invoke(std::declval&lt;Predicate&gt;(), std::declval&lt;element_type_t&lt;T&gt; &gt;()))</definition>
        <argsstring></argsstring>
        <name>has_call_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" line="34" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1ac0e5e9eac14449d093aab0237991187f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::detail::find_first_i_impl::Constrains&lt; V, P &gt;::Impl&lt; Predicate &gt;::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(Is_callable, T,(is_detected&lt; has_call_t, T &gt;::value), &quot;`boost::static_views::detail::find_first_i(xs, p)` &quot; &quot;requires `p` to be callable with `xs`&apos; element &quot; &quot;type. &quot; &quot;This condition has, I&apos;m afraid, been violated. &quot; &quot;Hence, &quot; &quot;the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>Is_callable</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(<ref refid="namespaceboost_1_1static__views_1_1detail_1a20af273fc3e3194340653219f8433ec9" kindref="member">is_detected</ref>&lt; has_call_t, T &gt;::value)</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::detail::find_first_i(xs, p)` &quot; &quot;requires `p` to be callable with `xs`&apos; element &quot; &quot;type. &quot; &quot;This condition</type>
          <declname>has</declname>
        </param>
        <param>
          <type>I &apos;m</type>
          <declname>afraid</declname>
        </param>
        <param>
          <type>been violated. &quot; &quot;</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>&quot; &quot;the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1abdc221950af7ac12962fed6635798ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::detail::find_first_i_impl::Constrains&lt; V, P &gt;::Impl&lt; Predicate &gt;::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(Call_has_correct_return_type, T,(std::is_convertible&lt; detected_t&lt; has_call_t, T &gt;, bool &gt;::value), &quot;`boost::static_views::detail::find_first_i(xs, p)` &quot; &quot;requires `p(xs[i])` to return something convertible &quot; &quot;to &quot; &quot;`bool`. That&apos;s, unfortunately, not the case here. &quot; &quot;Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>Call_has_correct_return_type</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(std::is_convertible&lt; <ref refid="namespaceboost_1_1static__views_1_1detail_1ab84cada28abde0639dcac6ef21424e85" kindref="member">detected_t</ref>&lt; has_call_t, T &gt;, bool &gt;::value)</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::detail::find_first_i(xs, p)` &quot; &quot;requires `p(xs[i])` to return something convertible &quot; &quot;to &quot; &quot;`bool`. That&apos;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>unfortunately</type>
        </param>
        <param>
          <type>not the case here. &quot; &quot;</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" line="47" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1a6faf548d2a5be78da1664dba431fe9fd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::detail::find_first_i_impl::Constrains&lt; V, P &gt;::Impl&lt; Predicate &gt;::test</definition>
        <argsstring>() noexcept -&gt; bool</argsstring>
        <name>test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" line="58" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1afbce80574896923e3d3b33847d8ced9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::detail::find_first_i_impl::Constrains&lt; V, P &gt;::Impl&lt; Predicate &gt;::check</definition>
        <argsstring>() noexcept -&gt; bool</argsstring>
        <name>check</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" line="64" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" bodystart="64" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" line="27" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/find_first.hpp" bodystart="27" bodyend="70"/>
    <listofallmembers>
      <member refid="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1ac0e5e9eac14449d093aab0237991187f" prot="public" virt="non-virtual"><scope>boost::static_views::detail::find_first_i_impl::Constrains::Impl</scope><name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1abdc221950af7ac12962fed6635798ac8" prot="public" virt="non-virtual"><scope>boost::static_views::detail::find_first_i_impl::Constrains::Impl</scope><name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1afbce80574896923e3d3b33847d8ced9e" prot="public" virt="non-virtual"><scope>boost::static_views::detail::find_first_i_impl::Constrains::Impl</scope><name>check</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1a6ccfb27303841b2f14b7c0c1c6053492" prot="public" virt="non-virtual"><scope>boost::static_views::detail::find_first_i_impl::Constrains::Impl</scope><name>element_type_t</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1af21a02b95400dd9d5fa3aa663832142e" prot="public" virt="non-virtual"><scope>boost::static_views::detail::find_first_i_impl::Constrains::Impl</scope><name>has_call_t</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1find__first__i__impl_1_1Constrains_1_1Impl_1a6faf548d2a5be78da1664dba431fe9fd" prot="public" virt="non-virtual"><scope>boost::static_views::detail::find_first_i_impl::Constrains::Impl</scope><name>test</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
