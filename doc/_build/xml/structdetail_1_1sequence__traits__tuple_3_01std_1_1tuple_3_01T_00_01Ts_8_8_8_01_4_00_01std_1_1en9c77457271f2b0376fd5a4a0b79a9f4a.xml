<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a" kind="struct" language="C++" prot="public">
    <compoundname>detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;</compoundname>
    <includes refid="sequence__traits_8hpp" local="no">sequence_traits.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1a30cdb7b94db9647badff3bef876bbfe6" prot="private" static="no">
        <type>std::tuple&lt; T, Ts... &gt;</type>
        <definition>using detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;::tuple_type =  std::tuple&lt;T, Ts...&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="445" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1ac7af0c1f8b3f898cffa7ed8fb4f31ff6" prot="private" static="no">
        <type>T</type>
        <definition>using detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="446" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1a9517be75d9ddf16e4694747f2ed2db11" prot="private" static="no">
        <type>std::decay_t&lt; auto(U) -&gt;decltype(dummy_get(std::declval&lt; U &gt;()))&gt;</type>
        <definition>using detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;::get_type =  std::decay_t&lt;auto(U)-&gt;decltype(dummy_get(std::declval&lt;U&gt;()))&gt;</definition>
        <argsstring></argsstring>
        <name>get_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="456" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="457" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1aa1c21b2ffb30f041ca37998706529837" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>static decltype(auto) constexpr detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;::dummy_get</definition>
        <argsstring>(U &amp;&amp;tpl) noexcept</argsstring>
        <name>dummy_get</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>tpl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="449" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1a0e600d4bf5db5ff3eb3f8e9cf85ec4af" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>static decltype(auto) constexpr detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;::at_impl</definition>
        <argsstring>(Tuple &amp;&amp;xs, std::size_t const i, std::index_sequence&lt; Is... &gt;) noexcept</argsstring>
        <name>at_impl</name>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="460" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="460" bodyend="466"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1a6b543230ba88e092671b9a26e926f25b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;std::is_same&lt;tuple_type,            std::remove_cv_t&lt;std::remove_reference_t&lt;Tuple&gt;&gt;&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>static decltype(auto) constexpr detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;::at</definition>
        <argsstring>(Tuple &amp;&amp;xs, std::size_t const i) noexcept</argsstring>
        <name>at</name>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="472" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="472" bodyend="477"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="442" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="441" bodyend="478"/>
    <listofallmembers>
      <member refid="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1a6b543230ba88e092671b9a26e926f25b" prot="public" virt="non-virtual"><scope>detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;</scope><name>at</name></member>
      <member refid="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1a0e600d4bf5db5ff3eb3f8e9cf85ec4af" prot="private" virt="non-virtual"><scope>detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;</scope><name>at_impl</name></member>
      <member refid="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1aa1c21b2ffb30f041ca37998706529837" prot="private" virt="non-virtual"><scope>detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;</scope><name>dummy_get</name></member>
      <member refid="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1a9517be75d9ddf16e4694747f2ed2db11" prot="private" virt="non-virtual"><scope>detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;</scope><name>get_type</name></member>
      <member refid="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1a30cdb7b94db9647badff3bef876bbfe6" prot="private" virt="non-virtual"><scope>detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;</scope><name>tuple_type</name></member>
      <member refid="structdetail_1_1sequence__traits__tuple_3_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_00_01std_1_1en9c77457271f2b0376fd5a4a0b79a9f4a_1ac7af0c1f8b3f898cffa7ed8fb4f31ff6" prot="private" virt="non-virtual"><scope>detail::sequence_traits_tuple&lt; std::tuple&lt; T, Ts... &gt;, std::enable_if_t&lt; utils::all(std::is_same&lt; T, Ts &gt;::value...)&gt; &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
