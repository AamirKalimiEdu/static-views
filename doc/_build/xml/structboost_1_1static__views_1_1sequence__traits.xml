<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structboost_1_1static__views_1_1sequence__traits" kind="struct" language="C++" prot="public">
    <compoundname>boost::static_views::sequence_traits</compoundname>
    <includes refid="sequence__traits_8hpp" local="no">sequence_traits.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para>A proxy through which functions access sequences. </para>    </briefdescription>
    <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
///
/// :ref:`As mentioned &lt;sequence-concept&gt;` earlier, sequences are
/// homogeneous collections with random random access to elements.
/// Sequences of length known at compile-time are called *static
/// sequences*. Sequences of unknown (at compile-time) length are,
/// obviously, called *dynamic sequences*. The distinction is made
/// using the property called *extent* which is similar to the
/// ``Extent`` template parameter in the |std::span proposal|_.
///
/// .. |std::span proposal| replace:: ``std::span`` proposal
/// .. _std::span proposal: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0122r4.pdf
///
/// :cpp:class:`sequence_traits` provides a uniform interface for
/// working with sequences. A general :cpp:class:`sequence_traits`
/// declaration may look like this:
///
/// .. code-block:: cpp
///
///   namespace boost {
///   namespace static_views {
///
///   template &lt;class T&gt;
///   struct sequence_traits {
///       static constexpr auto size(T const&amp;) noexcept -&gt;std::size_t;
///
///       static constexpr auto extent() noexcept -&gt;std::ptrdiff_t;
///
///       static constexpr auto at(T const&amp;, std::size_t) noexcept -&gt;const_reference;
///       static constexpr auto at(T&amp;, std::size_t) noexcept -&gt;reference;
///       static constexpr auto at(T&amp;&amp;, std::size_t) noexcept -&gt;rvalue_reference;
///   };
///
///   } // namespace static_views
///   } // namespace boost
///
/// * Elements are accessed by calling
///   ``sequence_traits&lt;T&gt;::at(xs, i)`` with a (const) reference to
///   ``T`` ``xs`` and index ``i``. ``at()`` must furthermore be
///   ``static`` and ``noexcept``. You&apos;re by no means required to
///   create all three overloads of ``at()``, one is sufficient.
///
/// * Extent is detemined by calling ``sequence_traits&lt;T&gt;::extent()``.
///   It should be ``static``, ``noexcept``, and have return type
///   convertible to ``std::ptrdiff_t``. If the size of ``T`` is known
///   at compile-time, ``extent()`` should return it. Otherwise, a
///   special value :cpp:var:`dynamic_extent` should be returned.
///
/// * Number of elements in a sequence ``xs`` is determined by calling
///   ``sequence_traits&lt;T&gt;::size(xs)``. ``size()`` must be ``static``,
///   ``noexcept``, and have return type convertible to
///   ``std::size_t``. Furthermore it it assumed that if
///   ``sequence_traits&lt;T&gt;::extent()`` returns a non-negative number,
///   calling ``size`` with any sequence of type ``T`` will return the
///   same result.
///
/// Currently, only arrays (``T[N]`` and ``std::array&lt;T, N&gt;``) and
/// homogeneous tuples (``std::tuple&lt;Ts...&gt;`` where :math:`\exists
/// \text{U}: \forall \text{T} \in \{\text{Ts}\dots\}: \text{T} =
/// \text{U}`) have specialisations of :cpp:class:`sequencce_traits`.
/// Specialising it for other types is really simple though.
/// :doc:`Here&apos;s &lt;examples/support_span&gt;` how one can add
/// support for ``std::span``:
///
/// .. literalinclude:: ../example/support_span.cpp
///    :lines: 10-37
///
///
/// </verbatim> </para>    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="94" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="94" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
