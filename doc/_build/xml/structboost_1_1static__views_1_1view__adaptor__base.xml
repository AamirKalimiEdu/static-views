<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structboost_1_1static__views_1_1view__adaptor__base" kind="struct" language="C++" prot="public">
    <compoundname>boost::static_views::view_adaptor_base</compoundname>
    <basecompoundref refid="structboost_1_1static__views_1_1view__base" prot="public" virt="non-virtual">boost::static_views::view_base</basecompoundref>
    <includes refid="view__base_8hpp" local="no">view_base.hpp</includes>
    <innerclass refid="structboost_1_1static__views_1_1view__adaptor__base_1_1traits" prot="private">boost::static_views::view_adaptor_base::traits</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>Derived</declname>
        <defname>Derived</defname>
      </param>
      <param>
        <type>class</type>
        <declname>Wrapper</declname>
        <defname>Wrapper</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <description><para>Constructs an adaptor of <computeroutput>view</computeroutput>.</para><para>Here, <computeroutput>view</computeroutput> is a wrapper around the actual view created with #make_wrapper(T&amp;&amp;) function. </para></description>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a212a8d90324bf7d1a7a802b1e4ca171e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::view_adaptor_base</definition>
        <argsstring>(wrapper_type &amp;&amp;view) std</argsstring>
        <name>view_adaptor_base</name>
        <param>
          <type>wrapper_type &amp;&amp;</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="359" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="359" bodyend="365"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Copy and move constructors/assignments</header>
      <description><para>Defines default copy and move constructors and assignments, i.e. is copy/move-constructible/assignable if <computeroutput>View</computeroutput> is. </para></description>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a96fa46c3106a583d72ed4643ae30e42d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::view_adaptor_base</definition>
        <argsstring>(view_adaptor_base const &amp;)=default</argsstring>
        <name>view_adaptor_base</name>
        <param>
          <type><ref refid="structboost_1_1static__views_1_1view__adaptor__base" kindref="compound">view_adaptor_base</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a8af0686c948d5b78a9f49fe313b7fdd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::view_adaptor_base</definition>
        <argsstring>(view_adaptor_base &amp;&amp;)=default</argsstring>
        <name>view_adaptor_base</name>
        <param>
          <type><ref refid="structboost_1_1static__views_1_1view__adaptor__base" kindref="compound">view_adaptor_base</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a709b375dc6518685883f0c3f370b4f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structboost_1_1static__views_1_1view__adaptor__base" kindref="compound">view_adaptor_base</ref> &amp;</type>
        <definition>constexpr view_adaptor_base&amp; boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::operator=</definition>
        <argsstring>(view_adaptor_base const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structboost_1_1static__views_1_1view__adaptor__base" kindref="compound">view_adaptor_base</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1afc89279105e490579dfea0e7bb1eaea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structboost_1_1static__views_1_1view__adaptor__base" kindref="compound">view_adaptor_base</ref> &amp;</type>
        <definition>constexpr view_adaptor_base&amp; boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::operator=</definition>
        <argsstring>(view_adaptor_base &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structboost_1_1static__views_1_1view__adaptor__base" kindref="compound">view_adaptor_base</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="382" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a96a00336636c531ca7ca4c58daf8234e" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::parent</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>parent</name>
        <briefdescription>
<para>Returns the underlying view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="388" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="388" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a03625ed5c427248f5a7316eaa456d333" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::parent</definition>
        <argsstring>() &amp;&amp;noexcept(std::declval&lt; wrapper_type &amp;&amp;&gt;().get())(whenever possible)</argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="398" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="398" bodyend="403"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Element access</header>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1acef5f41a2f000e46ae6b199b1b1afe21" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dummy</type>
            <defval>void</defval>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;traits&lt;Dummy&gt;::template            has_map&lt;derived_type&gt;()&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::unsafe_at</definition>
        <argsstring>(std::size_t const i) const &amp;noexcept(concepts::View::unsafe_at(std::declval&lt; view_type const &amp;&gt;(), std::declval&lt; std::size_t &gt;()))(whenever possible)</argsstring>
        <name>unsafe_at</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="440" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="440" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a03b41546eb70e2f74214c2e749a0bb73" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dummy</type>
            <defval>void</defval>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;traits&lt;Dummy&gt;::template            has_map&lt;derived_type&gt;()&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::unsafe_at</definition>
        <argsstring>(std::size_t const i) &amp;noexcept(concepts::View::unsafe_at(std::declval&lt; view_type &amp;&gt;(), std::declval&lt; std::size_t &gt;()))(whenever possible)</argsstring>
        <name>unsafe_at</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="461" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="461" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a29907c5edf34fc6bc3a443ee0e83ca5d" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dummy</type>
            <defval>void</defval>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;traits&lt;Dummy&gt;::template            has_map&lt;derived_type&gt;()&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::unsafe_at</definition>
        <argsstring>(std::size_t const i) &amp;&amp;noexcept(concepts::View::unsafe_at(std::declval&lt; view_type &amp;&amp;&gt;(), std::declval&lt; std::size_t &gt;()))(whenever possible)</argsstring>
        <name>unsafe_at</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="482" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="482" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a37c18cab7fa905cc56e0e9d7f7ea49a2" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dummy</type>
            <defval>void</defval>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;traits&lt;Dummy&gt;::template            has_map&lt;derived_type&gt;()&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::operator[]</definition>
        <argsstring>(std::size_t const i) const &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="504" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="504" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a5ba32613855fcfdabf80def63812d90d" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dummy</type>
            <defval>void</defval>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;traits&lt;Dummy&gt;::template            has_map&lt;derived_type&gt;()&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::operator[]</definition>
        <argsstring>(std::size_t const i) &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="520" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="520" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a3cc81abf80ec61090df16bae9946a09a" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Dummy</type>
            <defval>void</defval>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;traits&lt;Dummy&gt;::template            has_map&lt;derived_type&gt;()&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::operator[]</definition>
        <argsstring>(std::size_t const i) &amp;&amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="536" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="536" bodyend="544"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structboost_1_1static__views_1_1view__adaptor__base_1aa15450f5f428bdfd19d2e084146404fe" prot="private" static="no">
        <type>Derived</type>
        <definition>using boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::derived_type =  Derived</definition>
        <argsstring></argsstring>
        <name>derived_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="324" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structboost_1_1static__views_1_1view__adaptor__base_1a255a0e74a5dab7585a83c70382a4f1a1" prot="private" static="no">
        <type>Wrapper</type>
        <definition>using boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::wrapper_type =  Wrapper</definition>
        <argsstring></argsstring>
        <name>wrapper_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="325" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structboost_1_1static__views_1_1view__adaptor__base_1a423a836f3b17b5cdba986e345651b9d1" prot="private" static="no">
        <type>typename Wrapper::type</type>
        <definition>using boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::view_type =  typename Wrapper::type</definition>
        <argsstring></argsstring>
        <name>view_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="326" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="structboost_1_1static__views_1_1view__adaptor__base_1ae0758dc08ad0844ed7b0f82243017d8f" prot="protected" static="no">
        <type><ref refid="structboost_1_1static__views_1_1view__adaptor__base" kindref="compound">view_adaptor_base</ref>&lt; Derived, Wrapper &gt;</type>
        <definition>using boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::view_adaptor_base_type =  view_adaptor_base&lt;Derived, Wrapper&gt;</definition>
        <argsstring></argsstring>
        <name>view_adaptor_base_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="350" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="351" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structboost_1_1static__views_1_1view__adaptor__base_1a07e27f73c4662e088581b3df4095e8d8" prot="private" static="no" mutable="no">
        <type>wrapper_type</type>
        <definition>wrapper_type boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::_xs</definition>
        <argsstring></argsstring>
        <name>_xs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="328" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a7e7198121e66bf4341d1e9d14e9183d0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::derived</definition>
        <argsstring>() const noexcept -&gt; derived_type const &amp;</argsstring>
        <name>derived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="343" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="343" bodyend="347"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a195fd1168a57c356a36a07d4c7c3f83d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// Default implementation of the ``size`` function required by
/// the :ref:`view concept &lt;view-concept&gt;`. </verbatim> Just calls <computeroutput><ref refid="structboost_1_1static__views_1_1view__adaptor__base_1a195fd1168a57c356a36a07d4c7c3f83d" kindref="member">size()</ref></computeroutput> on the underlying view. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="424" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="424" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a318a9dd33bddd2f2e05cee96f87c630a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::begin</definition>
        <argsstring>() const noexcept(::boost::static_views ::begin(std::declval&lt; derived_type const &amp;&gt;()))(whenever possible)</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="549" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="549" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a71d80acac47e56a8a3c2059ebc65e773" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::end</definition>
        <argsstring>() const noexcept(::boost::static_views ::end(std::declval&lt; derived_type const &amp;&gt;()))(whenever possible)</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="557" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="557" bodyend="562"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1view__adaptor__base_1a8e437dd8e9475704bea2c78e402f9ea4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;::extent</definition>
        <argsstring>() noexcept -&gt; std::ptrdiff_t</argsstring>
        <name>extent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// Default implementation of the ``capacity`` function required
/// by the :ref:`view concept &lt;view-concept&gt;`. </verbatim> Just calls <computeroutput><ref refid="namespaceboost_1_1static__views_1a6e8f3602c58d63a274cccbde976c2c86" kindref="member">capacity()</ref></computeroutput> on the underlying view. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="413" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="413" bodyend="416"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// Base class to that helps with modeling the :ref:`View
/// &lt;view-concept&gt;` concept. </verbatim> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="119">
        <label>boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;</label>
        <link refid="structboost_1_1static__views_1_1view__adaptor__base"/>
        <childnode refid="120" relation="public-inheritance">
        </childnode>
      </node>
      <node id="120">
        <label>boost::static_views::view_base</label>
        <link refid="structboost_1_1static__views_1_1view__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="121">
        <label>boost::static_views::view_adaptor_base&lt; Derived, Wrapper &gt;</label>
        <link refid="structboost_1_1static__views_1_1view__adaptor__base"/>
        <childnode refid="122" relation="public-inheritance">
        </childnode>
      </node>
      <node id="122">
        <label>boost::static_views::view_base</label>
        <link refid="structboost_1_1static__views_1_1view__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="321" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="321" bodyend="563"/>
    <listofallmembers>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a07e27f73c4662e088581b3df4095e8d8" prot="private" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>_xs</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a318a9dd33bddd2f2e05cee96f87c630a" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>begin</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a7e7198121e66bf4341d1e9d14e9183d0" prot="private" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>derived</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1aa15450f5f428bdfd19d2e084146404fe" prot="private" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>derived_type</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a71d80acac47e56a8a3c2059ebc65e773" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>end</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a8e437dd8e9475704bea2c78e402f9ea4" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>extent</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a709b375dc6518685883f0c3f370b4f07" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>operator=</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1afc89279105e490579dfea0e7bb1eaea1" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>operator=</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a37c18cab7fa905cc56e0e9d7f7ea49a2" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>operator[]</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a5ba32613855fcfdabf80def63812d90d" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>operator[]</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a3cc81abf80ec61090df16bae9946a09a" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>operator[]</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a96a00336636c531ca7ca4c58daf8234e" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>parent</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a03625ed5c427248f5a7316eaa456d333" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>parent</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a195fd1168a57c356a36a07d4c7c3f83d" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>size</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1acef5f41a2f000e46ae6b199b1b1afe21" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>unsafe_at</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a03b41546eb70e2f74214c2e749a0bb73" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>unsafe_at</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a29907c5edf34fc6bc3a443ee0e83ca5d" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>unsafe_at</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a212a8d90324bf7d1a7a802b1e4ca171e" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>view_adaptor_base</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a96fa46c3106a583d72ed4643ae30e42d" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>view_adaptor_base</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a8af0686c948d5b78a9f49fe313b7fdd9" prot="public" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>view_adaptor_base</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1ae0758dc08ad0844ed7b0f82243017d8f" prot="protected" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>view_adaptor_base_type</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a423a836f3b17b5cdba986e345651b9d1" prot="private" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>view_type</name></member>
      <member refid="structboost_1_1static__views_1_1view__adaptor__base_1a255a0e74a5dab7585a83c70382a4f1a1" prot="private" virt="non-virtual"><scope>boost::static_views::view_adaptor_base</scope><name>wrapper_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
