<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structview__adaptor__base" kind="struct" prot="public">
    <compoundname>view_adaptor_base</compoundname>
    <basecompoundref refid="structview__base" prot="public" virt="non-virtual">view_base</basecompoundref>
    <includes refid="view__base_8hpp" local="no">view_base.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>Derived</declname>
        <defname>Derived</defname>
      </param>
      <param>
        <type>class</type>
        <declname>View</declname>
        <defname>View</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <description><para>Constructs an adaptor of <computeroutput>view</computeroutput>.</para><para>Here, <computeroutput>view</computeroutput> is a wrapper around the actual view created with <ref refid="wrapper_8hpp_1a869773653c4df37d23e4e3a96d2841b7" kindref="member">make_wrapper(T&amp;&amp;)</ref> function. </para></description>
      <memberdef kind="function" id="structview__adaptor__base_1a081ca186c301145c8ca08674c9c83702" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr view_adaptor_base&lt; Derived, View &gt;::view_adaptor_base</definition>
        <argsstring>(View &amp;&amp;view) BOOST_STATIC_VIEWS_NOEXCEPT_IF(std</argsstring>
        <name>view_adaptor_base</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="98" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="98" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Copy and move constructors/assignments</header>
      <description><para>Defines default copy and move constructors and assignments, i.e. is copy/move-constructible/assignable if <computeroutput>View</computeroutput> is. </para></description>
      <memberdef kind="function" id="structview__adaptor__base_1a95d73d5dea98d1d9fb667e0de3d2db20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr view_adaptor_base&lt; Derived, View &gt;::view_adaptor_base</definition>
        <argsstring>(view_adaptor_base const &amp;)=default</argsstring>
        <name>view_adaptor_base</name>
        <param>
          <type><ref refid="structview__adaptor__base" kindref="compound">view_adaptor_base</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structview__adaptor__base_1a6b801b834ff65616ebd0b201bf2ccb08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr view_adaptor_base&lt; Derived, View &gt;::view_adaptor_base</definition>
        <argsstring>(view_adaptor_base &amp;&amp;)=default</argsstring>
        <name>view_adaptor_base</name>
        <param>
          <type><ref refid="structview__adaptor__base" kindref="compound">view_adaptor_base</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structview__adaptor__base_1a9fead4eeb8ce03baaa1b232c4cea0e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structview__adaptor__base" kindref="compound">view_adaptor_base</ref> &amp;</type>
        <definition>constexpr view_adaptor_base&amp; view_adaptor_base&lt; Derived, View &gt;::operator=</definition>
        <argsstring>(view_adaptor_base const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structview__adaptor__base" kindref="compound">view_adaptor_base</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structview__adaptor__base_1a22143f370952734cf4c80659929874b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structview__adaptor__base" kindref="compound">view_adaptor_base</ref> &amp;</type>
        <definition>constexpr view_adaptor_base&amp; view_adaptor_base&lt; Derived, View &gt;::operator=</definition>
        <argsstring>(view_adaptor_base &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structview__adaptor__base" kindref="compound">view_adaptor_base</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="120" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structview__adaptor__base_1a767124ab23a20fded7bc6edb7cbcaac1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto view_adaptor_base&lt; Derived, View &gt;::parent</definition>
        <argsstring>() const &amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(noexcept(std::declval&lt; wrapper_type const &amp; &gt;().get()))</argsstring>
        <name>parent</name>
        <briefdescription>
<para>Returns the underlying view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="154" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structview__adaptor__base_1a5a27d8dea803e58a7699ca7189941cca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto view_adaptor_base&lt; Derived, View &gt;::parent</definition>
        <argsstring>()&amp;&amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(noexcept(std::declval&lt; wrapper_type &amp;&amp; &gt;().get()))</argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="177" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="177" bodyend="183"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Element access</header>
      <memberdef kind="function" id="structview__adaptor__base_1a7c477df3bdd93b8f8983325006ed4f27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto view_adaptor_base&lt; Derived, View &gt;::operator[]</definition>
        <argsstring>(std::size_t const i) const &amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(noexcept(std::declval&lt; view_adaptor_base const &amp; &gt;().parent()[view_adaptor_core_access::map(std::declval&lt; derived_type const &amp; &gt;(), std::declval&lt; std::size_t &gt;())]))</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="190" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structview__adaptor__base_1a0c839ea46bad2e630109fdacc47c2df8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto view_adaptor_base&lt; Derived, View &gt;::operator[]</definition>
        <argsstring>(std::size_t const i)&amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(noexcept(std::declval&lt; view_adaptor_base &amp; &gt;().parent()[view_adaptor_core_access::map(std::declval&lt; derived_type const &amp; &gt;(), std::declval&lt; std::size_t &gt;())]))</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="202" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="202" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structview__adaptor__base_1a844c5f4446e821d074bbc17977149561" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto view_adaptor_base&lt; Derived, View &gt;::operator[]</definition>
        <argsstring>(std::size_t const i)&amp;&amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(noexcept(std::declval&lt; view_adaptor_base &amp;&amp; &gt;().parent()[view_adaptor_core_access::map(std::declval&lt; derived_type const &amp; &gt;(), std::declval&lt; std::size_t &gt;())]))</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="214" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="214" bodyend="224"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structview__adaptor__base_1a6bada55094d7f43ee322d1fccbf3f292" prot="private" static="no">
        <type>Derived</type>
        <definition>using view_adaptor_base&lt; Derived, View &gt;::derived_type =  Derived</definition>
        <argsstring></argsstring>
        <name>derived_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="85" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structview__adaptor__base_1a50c91b8c5d88513afedad56988a2aee4" prot="private" static="no">
        <type>View</type>
        <definition>using view_adaptor_base&lt; Derived, View &gt;::wrapper_type =  View</definition>
        <argsstring></argsstring>
        <name>wrapper_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="86" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structview__adaptor__base_1a54cf9387b6fcbff3798064eeaf3447fb" prot="private" static="no">
        <type>typename View::type</type>
        <definition>using view_adaptor_base&lt; Derived, View &gt;::view_type =  typename View::type</definition>
        <argsstring></argsstring>
        <name>view_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="87" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="structview__adaptor__base_1a5a4854293c96582b2a65d3db30c9ce4c" prot="protected" static="no">
        <type><ref refid="structview__adaptor__base" kindref="compound">view_adaptor_base</ref>&lt; Derived, View &gt;</type>
        <definition>using view_adaptor_base&lt; Derived, View &gt;::view_adaptor_base_type =  view_adaptor_base&lt;Derived, View&gt;</definition>
        <argsstring></argsstring>
        <name>view_adaptor_base_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="90" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structview__adaptor__base_1ae6a2bae0ee0ac4d0f783702540aac345" prot="private" static="no" mutable="no">
        <type>View</type>
        <definition>View view_adaptor_base&lt; Derived, View &gt;::_xs</definition>
        <argsstring></argsstring>
        <name>_xs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="228" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structview__adaptor__base_1a37bdf2676b001c4a6aa4f9ef2ed0a581" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto view_adaptor_base&lt; Derived, View &gt;::size</definition>
        <argsstring>() const BOOST_STATIC_VIEWS_NOEXCEPT_IF(noexcept(std::declval&lt; view_adaptor_base const &amp; &gt;().parent().size()))</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// Default implementation of the ``size`` function required by the
/// :ref:`view concept &lt;view-concept&gt;`.
/// </verbatim> Just calls <computeroutput><ref refid="structview__adaptor__base_1a37bdf2676b001c4a6aa4f9ef2ed0a581" kindref="member">size()</ref></computeroutput> on the underlying view. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="142" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="142" bodyend="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structview__adaptor__base_1a0b692a86a1f36bf02bc71a55d5a86d81" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto view_adaptor_base&lt; Derived, View &gt;::capacity</definition>
        <argsstring>() noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// Default implementation of the ``capacity`` function required by the
/// :ref:`view concept &lt;view-concept&gt;`.
/// </verbatim> Just calls <computeroutput><ref refid="structview__adaptor__base_1a0b692a86a1f36bf02bc71a55d5a86d81" kindref="member">capacity()</ref></computeroutput> on the underlying view. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="131" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="131" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structview__adaptor__base_1a5b51cc24f4e86c07c2f7bccdbfaaee61" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto view_adaptor_base&lt; Derived, View &gt;::derived</definition>
        <argsstring>() const noexcept-&gt; derived_type const &amp;</argsstring>
        <name>derived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="232" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="232" bodyend="236"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// Base class to that helps with modeling the :ref:`View &lt;view-concept&gt;`
/// concept.
/// </verbatim> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="187">
        <label>view_adaptor_base&lt; Derived, View &gt;</label>
        <link refid="structview__adaptor__base"/>
        <childnode refid="188" relation="public-inheritance">
        </childnode>
      </node>
      <node id="188">
        <label>view_base</label>
        <link refid="structview__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="189">
        <label>view_adaptor_base&lt; Derived, View &gt;</label>
        <link refid="structview__adaptor__base"/>
        <childnode refid="190" relation="public-inheritance">
        </childnode>
      </node>
      <node id="190">
        <label>view_base</label>
        <link refid="structview__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" line="82" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/view_base.hpp" bodystart="82" bodyend="237"/>
    <listofallmembers>
      <member refid="structview__adaptor__base_1ae6a2bae0ee0ac4d0f783702540aac345" prot="private" virt="non-virtual"><scope>view_adaptor_base</scope><name>_xs</name></member>
      <member refid="structview__adaptor__base_1a0b692a86a1f36bf02bc71a55d5a86d81" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>capacity</name></member>
      <member refid="structview__adaptor__base_1a5b51cc24f4e86c07c2f7bccdbfaaee61" prot="private" virt="non-virtual"><scope>view_adaptor_base</scope><name>derived</name></member>
      <member refid="structview__adaptor__base_1a6bada55094d7f43ee322d1fccbf3f292" prot="private" virt="non-virtual"><scope>view_adaptor_base</scope><name>derived_type</name></member>
      <member refid="structview__adaptor__base_1a9fead4eeb8ce03baaa1b232c4cea0e8e" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>operator=</name></member>
      <member refid="structview__adaptor__base_1a22143f370952734cf4c80659929874b9" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>operator=</name></member>
      <member refid="structview__adaptor__base_1a7c477df3bdd93b8f8983325006ed4f27" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>operator[]</name></member>
      <member refid="structview__adaptor__base_1a0c839ea46bad2e630109fdacc47c2df8" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>operator[]</name></member>
      <member refid="structview__adaptor__base_1a844c5f4446e821d074bbc17977149561" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>operator[]</name></member>
      <member refid="structview__adaptor__base_1a767124ab23a20fded7bc6edb7cbcaac1" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>parent</name></member>
      <member refid="structview__adaptor__base_1a5a27d8dea803e58a7699ca7189941cca" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>parent</name></member>
      <member refid="structview__adaptor__base_1a37bdf2676b001c4a6aa4f9ef2ed0a581" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>size</name></member>
      <member refid="structview__adaptor__base_1a081ca186c301145c8ca08674c9c83702" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>view_adaptor_base</name></member>
      <member refid="structview__adaptor__base_1a95d73d5dea98d1d9fb667e0de3d2db20" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>view_adaptor_base</name></member>
      <member refid="structview__adaptor__base_1a6b801b834ff65616ebd0b201bf2ccb08" prot="public" virt="non-virtual"><scope>view_adaptor_base</scope><name>view_adaptor_base</name></member>
      <member refid="structview__adaptor__base_1a5a4854293c96582b2a65d3db30c9ce4c" prot="protected" virt="non-virtual"><scope>view_adaptor_base</scope><name>view_adaptor_base_type</name></member>
      <member refid="structview__adaptor__base_1a54cf9387b6fcbff3798064eeaf3447fb" prot="private" virt="non-virtual"><scope>view_adaptor_base</scope><name>view_type</name></member>
      <member refid="structview__adaptor__base_1a50c91b8c5d88513afedad56988a2aee4" prot="private" virt="non-virtual"><scope>view_adaptor_base</scope><name>wrapper_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
