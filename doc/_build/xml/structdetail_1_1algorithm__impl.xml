<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdetail_1_1algorithm__impl" kind="struct" prot="public">
    <compoundname>detail::algorithm_impl</compoundname>
    <basecompoundref refid="structalgorithm__base" prot="public" virt="non-virtual">algorithm_base</basecompoundref>
    <includes refid="algorithm__base_8hpp" local="no">algorithm_base.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Function</type>
      </param>
      <param>
        <type>class...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structdetail_1_1algorithm__impl_1a9157c83db65f0eb608a2c4241d43ee46" prot="private" static="no" mutable="no">
        <type>Function</type>
        <definition>Function detail::algorithm_impl&lt; Function, Args &gt;::_func</definition>
        <argsstring></argsstring>
        <name>_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="127" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdetail_1_1algorithm__impl_1af4b17b2c60fb5899ce7fc213385c7f1f" prot="private" static="no" mutable="no">
        <type>std::tuple&lt; <ref refid="structdetail_1_1wrapper" kindref="compound">wrapper</ref>&lt; Args &gt;...&gt;</type>
        <definition>std::tuple&lt;wrapper&lt;Args&gt;...&gt; detail::algorithm_impl&lt; Function, Args &gt;::_args</definition>
        <argsstring></argsstring>
        <name>_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="128" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1adb80ed40b3ba4ba616f8b399c4d44eee" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr detail::algorithm_impl&lt; Function, Args &gt;::algorithm_impl</definition>
        <argsstring>(Function &amp;&amp;f, wrapper&lt; Args &gt; &amp;&amp;...args) BOOST_STATIC_VIEWS_NOEXCEPT_IF(utils</argsstring>
        <name>algorithm_impl</name>
        <param>
          <type>Function &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1wrapper" kindref="compound">wrapper</ref>&lt; Args &gt; &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="55" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="55" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1a23a8aa03c5fb3a02b553582e92a0bc9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::algorithm_impl&lt; Function, Args &gt;::operator()</definition>
        <argsstring>(View &amp;&amp;xs) const &amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(noexcept(std::declval&lt; algorithm_implconst &amp; &gt;().call_impl(std::forward&lt; View &gt;(xs), std::make_index_sequence&lt; sizeof...(Args)&gt;{})))</argsstring>
        <name>operator()</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="89" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1a3f7243efedf098e0e6fde543e13e0f42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::algorithm_impl&lt; Function, Args &gt;::operator()</definition>
        <argsstring>(View &amp;&amp;xs)&amp;&amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(noexcept(std::declval&lt; algorithm_impl &amp;&amp; &gt;().call_impl(std::forward&lt; View &gt;(xs), std::make_index_sequence&lt; sizeof...(Args)&gt;{})))</argsstring>
        <name>operator()</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="115" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="115" bodyend="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1aa3f449480e95bcb1fbcb172d00d81e33" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto detail::algorithm_impl&lt; Function, Args &gt;::is_noexcept_call_cref</definition>
        <argsstring>() noexcept-&gt; bool</argsstring>
        <name>is_noexcept_call_cref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="132" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="132" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1ac63c275b739ffc897f8ee3be654c5b7e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto detail::algorithm_impl&lt; Function, Args &gt;::is_noexcept_call_move</definition>
        <argsstring>() noexcept-&gt; bool</argsstring>
        <name>is_noexcept_call_move</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="141" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="141" bodyend="147"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1a0b4a7efc1bc1b009ff6a44778f96da27" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::algorithm_impl&lt; Function, Args &gt;::call_impl</definition>
        <argsstring>(View &amp;&amp;xs, std::index_sequence&lt; Is...&gt;) const &amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(is_noexcept_call_cref&lt; View &amp;&amp; &gt;())</argsstring>
        <name>call_impl</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is...&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="152" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="152" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1adb8c34d1723cfe70e29ea0f3b4b09ac3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::algorithm_impl&lt; Function, Args &gt;::call_impl</definition>
        <argsstring>(View &amp;&amp;xs, std::index_sequence&lt; Is...&gt;)&amp;&amp;BOOST_STATIC_VIEWS_NOEXCEPT_IF(is_noexcept_call_move&lt; View &amp;&amp; &gt;())</argsstring>
        <name>call_impl</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is...&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="175" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="175" bodyend="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="107">
        <label>detail::algorithm_impl&lt; Function, Args &gt;</label>
        <link refid="structdetail_1_1algorithm__impl"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="108">
        <label>algorithm_base</label>
        <link refid="structalgorithm__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="109">
        <label>detail::algorithm_impl&lt; Function, Args &gt;</label>
        <link refid="structdetail_1_1algorithm__impl"/>
        <childnode refid="110" relation="public-inheritance">
        </childnode>
      </node>
      <node id="110">
        <label>algorithm_base</label>
        <link refid="structalgorithm__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="53" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="53" bodyend="183"/>
    <listofallmembers>
      <member refid="structdetail_1_1algorithm__impl_1af4b17b2c60fb5899ce7fc213385c7f1f" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>_args</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a9157c83db65f0eb608a2c4241d43ee46" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>_func</name></member>
      <member refid="structdetail_1_1algorithm__impl_1adb80ed40b3ba4ba616f8b399c4d44eee" prot="public" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>algorithm_impl</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a0b4a7efc1bc1b009ff6a44778f96da27" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>call_impl</name></member>
      <member refid="structdetail_1_1algorithm__impl_1adb8c34d1723cfe70e29ea0f3b4b09ac3" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>call_impl</name></member>
      <member refid="structdetail_1_1algorithm__impl_1aa3f449480e95bcb1fbcb172d00d81e33" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>is_noexcept_call_cref</name></member>
      <member refid="structdetail_1_1algorithm__impl_1ac63c275b739ffc897f8ee3be654c5b7e" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>is_noexcept_call_move</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a23a8aa03c5fb3a02b553582e92a0bc9d" prot="public" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>operator()</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a3f7243efedf098e0e6fde543e13e0f42" prot="public" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
