<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdetail_1_1algorithm__impl" kind="struct" prot="public">
    <compoundname>detail::algorithm_impl</compoundname>
    <basecompoundref refid="structalgorithm__base" prot="public" virt="non-virtual">algorithm_base</basecompoundref>
    <includes refid="algorithm__base_8hpp" local="no">algorithm_base.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Function</type>
      </param>
      <param>
        <type>class...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structdetail_1_1algorithm__impl_1a9157c83db65f0eb608a2c4241d43ee46" prot="private" static="no" mutable="no">
        <type>Function</type>
        <definition>Function detail::algorithm_impl&lt; Function, Args &gt;::_func</definition>
        <argsstring></argsstring>
        <name>_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="71" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdetail_1_1algorithm__impl_1af4b17b2c60fb5899ce7fc213385c7f1f" prot="private" static="no" mutable="no">
        <type>std::tuple&lt; <ref refid="structdetail_1_1wrapper" kindref="compound">wrapper</ref>&lt; Args &gt;...&gt;</type>
        <definition>std::tuple&lt;wrapper&lt;Args&gt;...&gt; detail::algorithm_impl&lt; Function, Args &gt;::_args</definition>
        <argsstring></argsstring>
        <name>_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="72" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1a3061109b2aa53c4b8091a245afa62422" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr detail::algorithm_impl&lt; Function, Args &gt;::algorithm_impl</definition>
        <argsstring>(Function &amp;&amp;f, std::tuple&lt; wrapper&lt; Args &gt;...&gt; &amp;&amp;args) noexcept(std::is_nothrow_move_constructible&lt; std::tuple&lt; wrapper&lt; Args &gt;...&gt;&gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; Function &gt;::value)</argsstring>
        <name>algorithm_impl</name>
        <param>
          <type>Function &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::tuple&lt; <ref refid="structdetail_1_1wrapper" kindref="compound">wrapper</ref>&lt; Args &gt;...&gt; &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="35" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="35" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1a8605da24cc29e895408260a23c9226be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>decltype(auto) constexpr detail::algorithm_impl&lt; Function, Args &gt;::operator()</definition>
        <argsstring>(View &amp;&amp;xs) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="50" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1a7759806a9968e3b6ad622455a1a6ce3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>decltype(auto) constexpr detail::algorithm_impl&lt; Function, Args &gt;::operator()</definition>
        <argsstring>(View &amp;&amp;xs) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="61" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="61" bodyend="68"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1aee1bb436703e91a846a8b54132a0a7ce" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>decltype(auto) constexpr detail::algorithm_impl&lt; Function, Args &gt;::call_impl</definition>
        <argsstring>(View &amp;&amp;xs, std::index_sequence&lt; Is...&gt;) const &amp;noexcept</argsstring>
        <name>call_impl</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is...&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="76" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="76" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1aea028c02f9ece4bc9cedf992b0dc6a27" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>decltype(auto) constexpr detail::algorithm_impl&lt; Function, Args &gt;::call_impl</definition>
        <argsstring>(View &amp;&amp;xs, std::index_sequence&lt; Is...&gt;)&amp;noexcept</argsstring>
        <name>call_impl</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is...&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="86" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1algorithm__impl_1a2dfd09793dae2e5b33142e530595b45a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>decltype(auto) constexpr detail::algorithm_impl&lt; Function, Args &gt;::call_impl</definition>
        <argsstring>(View &amp;&amp;xs, std::index_sequence&lt; Is...&gt;)&amp;&amp;noexcept</argsstring>
        <name>call_impl</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is...&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="96" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="96" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="56">
        <label>detail::algorithm_impl&lt; Function, Args &gt;</label>
        <link refid="structdetail_1_1algorithm__impl"/>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
      </node>
      <node id="57">
        <label>algorithm_base</label>
        <link refid="structalgorithm__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="58">
        <label>detail::algorithm_impl&lt; Function, Args &gt;</label>
        <link refid="structdetail_1_1algorithm__impl"/>
        <childnode refid="59" relation="public-inheritance">
        </childnode>
      </node>
      <node id="59">
        <label>algorithm_base</label>
        <link refid="structalgorithm__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="33" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" bodystart="33" bodyend="105"/>
    <listofallmembers>
      <member refid="structdetail_1_1algorithm__impl_1af4b17b2c60fb5899ce7fc213385c7f1f" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>_args</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a9157c83db65f0eb608a2c4241d43ee46" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>_func</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a3061109b2aa53c4b8091a245afa62422" prot="public" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>algorithm_impl</name></member>
      <member refid="structdetail_1_1algorithm__impl_1aee1bb436703e91a846a8b54132a0a7ce" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>call_impl</name></member>
      <member refid="structdetail_1_1algorithm__impl_1aea028c02f9ece4bc9cedf992b0dc6a27" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>call_impl</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a2dfd09793dae2e5b33142e530595b45a" prot="private" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>call_impl</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a8605da24cc29e895408260a23c9226be" prot="public" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>operator()</name></member>
      <member refid="structdetail_1_1algorithm__impl_1a7759806a9968e3b6ad622455a1a6ce3f" prot="public" virt="non-virtual"><scope>detail::algorithm_impl</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
