<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structboost_1_1static__views_1_1detail_1_1slice__impl" kind="struct" language="C++" prot="public">
    <compoundname>boost::static_views::detail::slice_impl</compoundname>
    <basecompoundref prot="public" virt="non-virtual">DropTake</basecompoundref>
    <includes refid="slice_8hpp" local="no">slice.hpp</includes>
    <templateparamlist>
      <param>
        <type>class DropTake</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1slice__impl_1a63b394a7550c0341a91a360b760a7220" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;!std::is_same&lt;std::decay_t&lt;View&gt;,            <ref refid="structboost_1_1static__views_1_1detail_1_1slice__impl" kindref="compound">slice_impl</ref>&lt;DropTake&gt;&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr boost::static_views::detail::slice_impl&lt; DropTake &gt;::slice_impl</definition>
        <argsstring>(View &amp;&amp;xs) std</argsstring>
        <name>slice_impl</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
<para>Converts <computeroutput>xs</computeroutput> to &quot;slice view&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>View</parametername>
</parameternamelist>
<parameterdescription>
<para><verbatim>embed:rst:leading-slashes
/// Wrapper around a *view* (i.e. ``typename View::type`` must
/// model the :ref:`view &lt;view-concept&gt;` concept). It is
/// furthermore assumed that ``View`` is of the form
/// ``wrapper&lt;drop_impl&lt;wrapper&lt;take_impl&lt;wrapper&lt;V&gt;&amp;&amp;&gt;&gt;&gt;&amp;&amp;&gt;``,
/// where ``V`` is either lvalue or rvalue reference to some view.
/// </verbatim> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para><bold>Rvalue</bold> reference to a wrapper around a take view of a drop view of a view.</para></parameterdescription>
</parameteritem>
</parameterlist>
<verbatim>embed:rst:leading-slashes
/// .. note::
///   It&apos;s pretty much impossible to specify ``DropTake`` and
///   ``View`` template parameters correctly. For this reason
///   :cpp:var:`slice` factory function is provided. Use it
///   instead to construct slice views.
/// </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/slice.hpp" line="46" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/slice.hpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1slice__impl_1a28d653403d4397523be791ed96c3d941" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::detail::slice_impl&lt; DropTake &gt;::map</definition>
        <argsstring>(std::size_t const i) const noexcept</argsstring>
        <name>map</name>
        <param>
          <type>std::size_t const</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>&quot;Maps&quot; index <computeroutput>i</computeroutput> to the corresponding index in the parent view. </para>        </briefdescription>
        <detaileddescription>
<para>Let <computeroutput>xs</computeroutput> be of type <ref refid="structboost_1_1static__views_1_1detail_1_1slice__impl_1a63b394a7550c0341a91a360b760a7220" kindref="member">slice_impl</ref>. The following relation then holds</para><para><computeroutput>xs[i] = xs.</computeroutput> <ref refid="structboost_1_1static__views_1_1detail_1_1slice__impl_1ac7997d7f0243f760827e53316fca5703" kindref="member">parent</ref> <computeroutput>()[xs.</computeroutput> <ref refid="structboost_1_1static__views_1_1detail_1_1slice__impl_1a28d653403d4397523be791ed96c3d941" kindref="member">map</ref> <computeroutput>(i)]</computeroutput> <formula id="1">$ \forall i \in \{0, 1, \dots, \text{xs.size}()-1\}$</formula>.</para><para>This function and the <ref refid="structboost_1_1static__views_1_1detail_1_1slice__impl_1ac7997d7f0243f760827e53316fca5703" kindref="member">parent()</ref> member function are what distinguish slice view from the &quot;drop view of take view of
view&quot;. Although slice is implemented in terms of the latter, this function goes two steps up and thus makes the rest of the library think that slice is a single view. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/slice.hpp" line="68" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/slice.hpp" bodystart="68" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structboost_1_1static__views_1_1detail_1_1slice__impl_1ac7997d7f0243f760827e53316fca5703" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto boost::static_views::detail::slice_impl&lt; DropTake &gt;::parent</definition>
        <argsstring>() const noexcept</argsstring>
        <name>parent</name>
        <briefdescription>
<para>Returns the &quot;parent&quot; view. </para>        </briefdescription>
        <detaileddescription>
<para>Let <computeroutput>xs_ptr</computeroutput> be a pointer to some view. The following relation then holds</para><para><computeroutput>xs_ptr = &amp;</computeroutput> <ref refid="namespaceboost_1_1static__views_1af4f426822f44929b5ef3367b231bd36c" kindref="member">slice</ref> <computeroutput>(b, e)(*xs_ptr).</computeroutput> <ref refid="structboost_1_1static__views_1_1detail_1_1slice__impl_1ac7997d7f0243f760827e53316fca5703" kindref="member">parent</ref> <computeroutput>(),</computeroutput> <formula id="2">$\forall \text{b},\text{e} \in \mathbb{N}$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/slice.hpp" line="93" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/slice.hpp" bodystart="93" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="101">
        <label>boost::static_views::detail::slice_impl&lt; DropTake &gt;</label>
        <link refid="structboost_1_1static__views_1_1detail_1_1slice__impl"/>
        <childnode refid="102" relation="public-inheritance">
        </childnode>
      </node>
      <node id="102">
        <label>DropTake</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="103">
        <label>boost::static_views::detail::slice_impl&lt; DropTake &gt;</label>
        <link refid="structboost_1_1static__views_1_1detail_1_1slice__impl"/>
        <childnode refid="104" relation="public-inheritance">
        </childnode>
      </node>
      <node id="104">
        <label>DropTake</label>
      </node>
    </collaborationgraph>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/slice.hpp" line="19" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/slice.hpp" bodystart="19" bodyend="101"/>
    <listofallmembers>
      <member refid="structboost_1_1static__views_1_1detail_1_1slice__impl_1a28d653403d4397523be791ed96c3d941" prot="public" virt="non-virtual"><scope>boost::static_views::detail::slice_impl</scope><name>map</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1slice__impl_1ac7997d7f0243f760827e53316fca5703" prot="public" virt="non-virtual"><scope>boost::static_views::detail::slice_impl</scope><name>parent</name></member>
      <member refid="structboost_1_1static__views_1_1detail_1_1slice__impl_1a63b394a7550c0341a91a360b760a7220" prot="public" virt="non-virtual"><scope>boost::static_views::detail::slice_impl</scope><name>slice_impl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
