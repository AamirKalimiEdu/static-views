<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="namespacedetail" kind="namespace">
    <compoundname>detail</compoundname>
    <innerclass refid="structdetail_1_1algorithm__impl" prot="public">detail::algorithm_impl</innerclass>
    <innerclass refid="structdetail_1_1concat__impl" prot="public">detail::concat_impl</innerclass>
    <innerclass refid="structdetail_1_1drop__impl" prot="public">detail::drop_impl</innerclass>
    <innerclass refid="structdetail_1_1find__first__i__impl" prot="public">detail::find_first_i_impl</innerclass>
    <innerclass refid="structdetail_1_1hashed__impl" prot="public">detail::hashed_impl</innerclass>
    <innerclass refid="structdetail_1_1hashed__init__impl" prot="public">detail::hashed_init_impl</innerclass>
    <innerclass refid="structdetail_1_1is__reference__wrapper" prot="public">detail::is_reference_wrapper</innerclass>
    <innerclass refid="structdetail_1_1left__fold__impl" prot="public">detail::left_fold_impl</innerclass>
    <innerclass refid="structdetail_1_1make__algorithm__impl" prot="public">detail::make_algorithm_impl</innerclass>
    <innerclass refid="structdetail_1_1make__drop__impl" prot="public">detail::make_drop_impl</innerclass>
    <innerclass refid="structdetail_1_1make__hashed__impl" prot="public">detail::make_hashed_impl</innerclass>
    <innerclass refid="structdetail_1_1make__slice__impl" prot="public">detail::make_slice_impl</innerclass>
    <innerclass refid="structdetail_1_1make__take__impl" prot="public">detail::make_take_impl</innerclass>
    <innerclass refid="structdetail_1_1make__through__impl" prot="public">detail::make_through_impl</innerclass>
    <innerclass refid="structdetail_1_1raw__view__impl" prot="public">detail::raw_view_impl</innerclass>
    <innerclass refid="structdetail_1_1slice__impl" prot="public">detail::slice_impl</innerclass>
    <innerclass refid="structdetail_1_1take__impl" prot="public">detail::take_impl</innerclass>
    <innerclass refid="structdetail_1_1through__impl" prot="public">detail::through_impl</innerclass>
    <innerclass refid="structdetail_1_1wrapper" prot="public">detail::wrapper</innerclass>
    <innernamespace refid="namespacedetail_1_1utils">detail::utils</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedetail_1ab4598d5c350d905b44cbe2177cf29416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOST_NORETURN auto</type>
        <definition>BOOST_NORETURN auto detail::make_out_of_bound</definition>
        <argsstring>(char const *msg) -&gt; void</argsstring>
        <name>make_out_of_bound</name>
        <param>
          <type>char const *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/errors.hpp" line="52" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/errors.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1abaaeea109f6345d9d41e1acc0e6ab896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOST_NORETURN auto</type>
        <definition>BOOST_NORETURN auto detail::make_invalid_range</definition>
        <argsstring>(char const *msg) -&gt; void</argsstring>
        <name>make_invalid_range</name>
        <param>
          <type>char const *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/errors.hpp" line="58" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/errors.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1abdaeb39c906d06f782d9d9df8b062c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOST_NORETURN auto</type>
        <definition>BOOST_NORETURN auto detail::make_full_bucket</definition>
        <argsstring>(char const *msg) -&gt; void</argsstring>
        <name>make_full_bucket</name>
        <param>
          <type>char const *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/errors.hpp" line="64" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/errors.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ab32602b992294b4881aded303a8d3e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>BucketSize</declname>
            <defname>BucketSize</defname>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class H</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_hashed_init_impl</definition>
        <argsstring>(V &amp;&amp;xs, H &amp;&amp;h, std::index_sequence&lt; Is...&gt;)</argsstring>
        <name>make_hashed_init_impl</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>H &amp;&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is...&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="72" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aeeeecaf0ed459661b28bdce3fbc0e1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>BucketCount</declname>
            <defname>BucketCount</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>BucketSize</declname>
            <defname>BucketSize</defname>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_hashed_init_impl</definition>
        <argsstring>(V &amp;&amp;xs, H &amp;&amp;h)</argsstring>
        <name>make_hashed_init_impl</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>H &amp;&amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" line="80" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/hashed.hpp" bodystart="80" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/algorithm_base.hpp" line="32" column="1"/>
  </compounddef>
</doxygen>
