<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="namespacedetail" kind="namespace">
    <compoundname>detail</compoundname>
    <innerclass refid="structdetail_1_1algorithm__impl" prot="public">detail::algorithm_impl</innerclass>
    <innerclass refid="structdetail_1_1algorithm__variable__impl" prot="public">detail::algorithm_variable_impl</innerclass>
    <innerclass refid="structdetail_1_1apply__composed__impl__from" prot="public">detail::apply_composed_impl_from</innerclass>
    <innerclass refid="structdetail_1_1apply__composed__impl__from_3_010_01_4" prot="public">detail::apply_composed_impl_from&lt; 0 &gt;</innerclass>
    <innerclass refid="structdetail_1_1compose__impl" prot="public">detail::compose_impl</innerclass>
    <innerclass refid="structdetail_1_1drop__impl" prot="public">detail::drop_impl</innerclass>
    <innerclass refid="structdetail_1_1make__drop__impl" prot="public">detail::make_drop_impl</innerclass>
    <innerclass refid="structdetail_1_1make__drop__while__impl" prot="public">detail::make_drop_while_impl</innerclass>
    <innerclass refid="structdetail_1_1make__not__fn__impl" prot="public">detail::make_not_fn_impl</innerclass>
    <innerclass refid="structdetail_1_1make__raw__view" prot="public">detail::make_raw_view</innerclass>
    <innerclass refid="structdetail_1_1make__remove__if__impl" prot="public">detail::make_remove_if_impl</innerclass>
    <innerclass refid="structdetail_1_1make__reverse__impl" prot="public">detail::make_reverse_impl</innerclass>
    <innerclass refid="structdetail_1_1make__sort__impl" prot="public">detail::make_sort_impl</innerclass>
    <innerclass refid="structdetail_1_1make__take__impl" prot="public">detail::make_take_impl</innerclass>
    <innerclass refid="structdetail_1_1make__take__while__impl" prot="public">detail::make_take_while_impl</innerclass>
    <innerclass refid="structdetail_1_1mapped__compose__impl" prot="public">detail::mapped_compose_impl</innerclass>
    <innerclass refid="structdetail_1_1min__algo__impl" prot="public">detail::min_algo_impl</innerclass>
    <innerclass refid="structdetail_1_1min__element__algo__impl" prot="public">detail::min_element_algo_impl</innerclass>
    <innerclass refid="structdetail_1_1not__fn__impl" prot="public">detail::not_fn_impl</innerclass>
    <innerclass refid="structdetail_1_1raw__view__impl" prot="public">detail::raw_view_impl</innerclass>
    <innerclass refid="structdetail_1_1reverse__impl" prot="public">detail::reverse_impl</innerclass>
    <innerclass refid="structdetail_1_1sort__impl" prot="public">detail::sort_impl</innerclass>
    <innerclass refid="structdetail_1_1sort__init__impl" prot="public">detail::sort_init_impl</innerclass>
    <innerclass refid="structdetail_1_1wrapper" prot="public">detail::wrapper</innerclass>
    <innerclass refid="structdetail_1_1wrapper_3_01T_01_6_01_4" prot="public">detail::wrapper&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structdetail_1_1wrapper_3_01T_01_6_6_01_4" prot="public">detail::wrapper&lt; T &amp;&amp; &gt;</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedetail_1a5923a024dd46052571481e63e4b98ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto detail::all</definition>
        <argsstring>() noexcept-&gt; bool</argsstring>
        <name>all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="280" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a03ef684a405a582a0b38afcf1d38ae80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Bools</declname>
            <defname>Bools</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::all</definition>
        <argsstring>(bool x, Bools...xs) noexcept-&gt; bool</argsstring>
        <name>all</name>
        <param>
          <type>bool</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Bools...</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="286" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a8ab8b5ccdd36a725256d0e803c95d0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Maker</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_algorithm_impl</definition>
        <argsstring>(Args...args) noexcept(noexcept(algorithm_impl&lt; Maker, Args...&gt;{std::make_tuple(std::move(args)...)}))</argsstring>
        <name>make_algorithm_impl</name>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="366" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="366" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a49d28be21c3d345ad07d73502e5a5921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>decltype(auto) constexpr detail::apply_composed_impl</definition>
        <argsstring>(Tuple &amp;&amp;fs, Args &amp;&amp;...args) noexcept</argsstring>
        <name>apply_composed_impl</name>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="484" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="484" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a6bb80162929879e028bb060231b5d779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Fs</declname>
            <defname>Fs</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_compose_impl</definition>
        <argsstring>(Fs &amp;&amp;...fs) noexcept</argsstring>
        <name>make_compose_impl</name>
        <param>
          <type>Fs &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="510" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="510" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0d0fc8c12dbe54eaa16be66b9c71a7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Fs</declname>
            <defname>Fs</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_mapped_compose_impl</definition>
        <argsstring>(F &amp;&amp;f, Fs &amp;&amp;...fs) noexcept</argsstring>
        <name>make_mapped_compose_impl</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Fs &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="549" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="549" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a109c9a752d528f2a166cd9803716888c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class Algo</type>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>decltype(auto) constexpr detail::pipe</definition>
        <argsstring>(View &amp;&amp;xs, Algo &amp;&amp;ys, std::true_type) noexcept</argsstring>
        <name>pipe</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>Algo &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="686" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="686" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aee1d9f05fa93871230b844912d99a4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Sequence</type>
          </param>
          <param>
            <type>class Algo</type>
          </param>
        </templateparamlist>
        <type>decltype(auto) constexpr</type>
        <definition>decltype(auto) constexpr detail::pipe</definition>
        <argsstring>(Sequence &amp;xs, Algo &amp;&amp;ys, std::false_type) noexcept</argsstring>
        <name>pipe</name>
        <param>
          <type>Sequence &amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>Algo &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="697" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="697" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a709b1a5338565adf0e6952a1119b4e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class Predicate</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::find_first_i</definition>
        <argsstring>(View &amp;&amp;xs, Predicate &amp;&amp;p) noexcept</argsstring>
        <name>find_first_i</name>
        <param>
          <type>View &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>Predicate &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="771" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="771" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a78baefb55d5aa3fd96a7fdc8a90938d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Less</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::bubble_sort_impl</definition>
        <argsstring>(std::size_t *xs, std::size_t size, Less &amp;&amp;less) noexcept</argsstring>
        <name>bubble_sort_impl</name>
        <param>
          <type>std::size_t *</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Less &amp;&amp;</type>
          <declname>less</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="1093" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="1093" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa70402575ae84a4c64ae02bf77e0348f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class P</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::_make_sort_init_impl</definition>
        <argsstring>(V &amp;&amp;xs, P &amp;&amp;p, std::index_sequence&lt; Is...&gt;) noexcept</argsstring>
        <name>_make_sort_init_impl</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is...&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="1135" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="1135" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ac0fe4f464aa6b23a5ac6c0d75a86b358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_sort_init_impl</definition>
        <argsstring>(V &amp;&amp;xs, P &amp;&amp;p) noexcept</argsstring>
        <name>make_sort_init_impl</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="1142" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" bodystart="1142" bodyend="1147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>[make_wrapper implementation] </para>    </briefdescription>
    <detaileddescription>
<para>Given a source range and a unary predicate, filter the elements that satisfy the predicate. (For users of Boost.Range, this is like the filter adaptor.)</para><para>Give a source range a lower bound (inclusive) and an upper bound (exclusive), create a new range that begins and ends at the specified offsets.</para><para>Given a source range and an integral count, return a range consisting of the first count elements from the source range, or the complete range if it has fewer elements.</para><para>Create a new range that traverses the source range in reverse order.</para><para>Remove elements from the front of a range that satisfy a unary predicate.</para><para>Given an integral count, return a range consisting of all but the first count elements from the source range, or an empty range if it has fewer elements.</para><para>Raw view of the sequence.</para><para><computeroutput>std::experimental::not_fn</computeroutput> except that it&apos;s constexpr. </para>    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/static_views.hpp" line="154" column="1"/>
  </compounddef>
</doxygen>
