<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespaceboost_1_1static__views_1_1concepts_1_1sequence" kind="namespace" language="C++">
    <compoundname>boost::static_views::concepts::sequence</compoundname>
    <innerclass refid="structboost_1_1static__views_1_1concepts_1_1sequence_1_1ExtentIsConstexpr" prot="public">boost::static_views::concepts::sequence::ExtentIsConstexpr</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aeee7cacb846914acd5ba4b70686ed4b5" prot="public" static="no">
        <type>decltype(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;{})</type>
        <definition>using boost::static_views::concepts::sequence::has_sequence_traits_spec_t = typedef decltype(sequence_traits&lt;T&gt;{})</definition>
        <argsstring></argsstring>
        <name>has_sequence_traits_spec_t</name>
        <briefdescription>
<para>Helper trait to determine whether a specialisation of #sequence_traits for <computeroutput>T</computeroutput> exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="106" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a9d8c87094070fb5abc8e923c0b01760b" prot="public" static="no">
        <type>decltype(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::extent())</type>
        <definition>using boost::static_views::concepts::sequence::has_extent_t = typedef decltype(sequence_traits&lt;T&gt;::extent())</definition>
        <argsstring></argsstring>
        <name>has_extent_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="130" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a1a7d60bde22b68950be582a4988c1b26" prot="public" static="no">
        <type>decltype(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::size(std::declval&lt; T const  &amp; &gt;()))</type>
        <definition>using boost::static_views::concepts::sequence::has_size_t = typedef decltype(sequence_traits&lt;T&gt;::size(std::declval&lt;T const&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>has_size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="195" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1af10ba00020c096725c59b7fa46d97ed9" prot="public" static="no">
        <type>decltype(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::at(std::declval&lt; T &gt;(), std::declval&lt; std::size_t &gt;()))</type>
        <definition>using boost::static_views::concepts::sequence::has_at_t = typedef decltype(sequence_traits&lt;T&gt;::at( std::declval&lt;T&gt;(), std::declval&lt;std::size_t&gt;()))</definition>
        <argsstring></argsstring>
        <name>has_at_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="221" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" prot="public" static="no">
        <type><ref refid="structboost_1_1static__views_1_1concepts_1_1and__" kindref="compound">and_</ref>&lt; HasSequenceTraitsSpecialisation, <ref refid="structboost_1_1static__views_1_1concepts_1_1all__" kindref="compound">all_</ref>&lt; <ref refid="structboost_1_1static__views_1_1concepts_1_1and__" kindref="compound">and_</ref>&lt; HasExtent, ExtentHasCorrectReturnType, ExtentIsNoexcept, ExtentHasCorrectReturnValue &gt;, <ref refid="structboost_1_1static__views_1_1concepts_1_1and__" kindref="compound">and_</ref>&lt; HasAt, AtIsNoexcept &gt;, <ref refid="structboost_1_1static__views_1_1concepts_1_1and__" kindref="compound">and_</ref>&lt; HasSize, SizeHasCorrectReturnType, SizeIsNoexcept &gt; &gt; &gt;</type>
        <definition>using boost::static_views::concepts::sequence::Sequence = typedef and_&lt; HasSequenceTraitsSpecialisation, all_&lt; and_&lt; HasExtent, ExtentHasCorrectReturnType, ExtentIsNoexcept, ExtentHasCorrectReturnValue &gt;, and_&lt; HasAt, AtIsNoexcept &gt;, and_&lt; HasSize, SizeHasCorrectReturnType, SizeIsNoexcept &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="245" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a5058cdb0338600ca2e377a7f71db82dd" prot="public" static="no">
        <type><ref refid="structboost_1_1static__views_1_1concepts_1_1and__" kindref="compound">and_</ref>&lt; <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref>, HasFixedSize &gt;</type>
        <definition>using boost::static_views::concepts::sequence::StaticSequence = typedef and_&lt; Sequence, HasFixedSize &gt;</definition>
        <argsstring></argsstring>
        <name>StaticSequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="267" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1afdb81cc31becfb0094a72dbb1692864c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(HasSequenceTraitsSpecialisation, T,(is_detected&lt; has_sequence_traits_spec_t, T &gt;::value), &quot;There exists no specialisation of &quot; &quot;`boost::static_views::sequence_traits` for type `T`. &quot; &quot;Availability of it is, unfortunately, required &quot; &quot;by the Sequence concept. Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>HasSequenceTraitsSpecialisation</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(is_detected&lt; <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aeee7cacb846914acd5ba4b70686ed4b5" kindref="member">has_sequence_traits_spec_t</ref>, T &gt;::value)</type>
        </param>
        <param>
          <type>&quot;There exists no specialisation of &quot; &quot;`<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">boost::static_views::sequence_traits</ref>` for type `T`. &quot; &quot;Availability of it</type>
          <declname>is</declname>
        </param>
        <param>
          <type>unfortunately</type>
        </param>
        <param>
          <type>required &quot; &quot;by the <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref> concept.</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a792a0882a85b2e29aefb5473bb8593f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(HasExtent, T,(is_detected&lt; has_extent_t, T &gt;::value), &quot;`boost::static_views::sequence_traits&lt;T&gt;` has no &quot; &quot;static member function `extent()`. Availability of &quot; &quot;it is, unfortunately, required by the Sequence concept. &quot; &quot;Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>HasExtent</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(is_detected&lt; <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a9d8c87094070fb5abc8e923c0b01760b" kindref="member">has_extent_t</ref>, T &gt;::value)</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::sequence_traits&lt;T&gt;` has no &quot; &quot;static member function `extent()`. Availability of &quot; &quot;it</type>
          <declname>is</declname>
        </param>
        <param>
          <type>unfortunately</type>
        </param>
        <param>
          <type>required by the <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref> concept. &quot; &quot;</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a5691fa43255def0014d135ad9e9a9c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(ExtentHasCorrectReturnType, T,(std::is_convertible&lt; detected_t&lt; has_extent_t, T &gt;, std::ptrdiff_t &gt;::value), &quot;Return type of &quot; &quot;`boost::static_views::sequence_traits&lt;T&gt;::extent()` is &quot; &quot;not convertible to ptrdiff_t. According to the &quot; &quot;Sequence concept, it should be. Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>ExtentHasCorrectReturnType</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(std::is_convertible&lt; detected_t&lt; <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a9d8c87094070fb5abc8e923c0b01760b" kindref="member">has_extent_t</ref>, T &gt;, std::ptrdiff_t &gt;::value)</type>
        </param>
        <param>
          <type>&quot;Return type of &quot; &quot;`<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">boost::static_views::sequence_traits</ref>&lt;T&gt;::extent()` is &quot; &quot;not convertible to ptrdiff_t. According to the &quot; &quot;<ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref></type>
          <declname>concept</declname>
        </param>
        <param>
          <type>it should be.</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a007b41d39eee8bc1272a78cbb49c716f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(ExtentIsNoexcept, T,(noexcept(sequence_traits&lt; T &gt;::extent())), &quot;`boost::static_views::sequence_traits&lt;T&gt;::extent()` is &quot; &quot;not noexcept. It should be though, according to the &quot; &quot;Sequence concept. Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>ExtentIsNoexcept</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(noexcept(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::extent()))</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::sequence_traits&lt;T&gt;::extent()` is &quot; &quot;not noexcept. It should be</type>
          <declname>though</declname>
        </param>
        <param>
          <type>according to the &quot; &quot;<ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref> concept.</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a0784d45db19198a442839ec42538a9b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(ExtentHasCorrectReturnValue, T,(sequence_traits&lt; T &gt;::extent()==dynamic_extent||sequence_traits&lt; T &gt;::extent() &gt;=0), &quot;`boost::static_views::sequence_traits&lt;T&gt;::extent()` returns &quot; &quot;an invald extent. Either a non-negative number or &quot; &quot;`boost::static_views::dynamic_extent` should be returned. &quot; &quot;Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>ExtentHasCorrectReturnValue</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::extent()==<ref refid="namespaceboost_1_1static__views_1a03b1149a802601deab30574774734dd0" kindref="member">dynamic_extent</ref>||<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::extent() &gt;=0)</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::sequence_traits&lt;T&gt;::extent()` returns &quot; &quot;an invald extent. Either a non-negative number or &quot; &quot;`<ref refid="namespaceboost_1_1static__views_1a03b1149a802601deab30574774734dd0" kindref="member">boost::static_views::dynamic_extent</ref>` should be returned. &quot; &quot;</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a6b8f29734368784aeccfb2cf2cd82d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(HasSize, T,(is_detected&lt; has_size_t, T &gt;::value), &quot;`boost::static_views::sequence_traits&lt;T&gt;` has no &quot; &quot;static member function `size(T const&amp;)`. Availability of &quot; &quot;it is, unfortunately, required by the Sequence concept. &quot; &quot;Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>HasSize</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(is_detected&lt; <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a1a7d60bde22b68950be582a4988c1b26" kindref="member">has_size_t</ref>, T &gt;::value)</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::sequence_traits&lt;T&gt;` has no &quot; &quot;static member function `size(T const&amp;)`. Availability of &quot; &quot;it</type>
          <declname>is</declname>
        </param>
        <param>
          <type>unfortunately</type>
        </param>
        <param>
          <type>required by the <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref> concept. &quot; &quot;</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aeedc89d74855270813715b7aa39edc65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(SizeHasCorrectReturnType, T,(std::is_convertible&lt; detected_t&lt; has_size_t, T &gt;, std::size_t &gt;::value), &quot;Return type of &quot; &quot;`boost::static_views::sequence_traits&lt;T&gt;::size(T const&amp;)` &quot; &quot;is not convertible to size_t. According to the &quot; &quot;Sequence concept, it should be. Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>SizeHasCorrectReturnType</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(std::is_convertible&lt; detected_t&lt; <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a1a7d60bde22b68950be582a4988c1b26" kindref="member">has_size_t</ref>, T &gt;, std::size_t &gt;::value)</type>
        </param>
        <param>
          <type>&quot;Return type of &quot; &quot;`<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">boost::static_views::sequence_traits</ref>&lt;T&gt;::size(T const&amp;)` &quot; &quot;is not convertible to size_t. According to the &quot; &quot;<ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref></type>
          <declname>concept</declname>
        </param>
        <param>
          <type>it should be.</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a9d2471f2e36f5428ee04153c2e61df46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(SizeIsNoexcept, T,(noexcept(sequence_traits&lt; T &gt;::size(std::declval&lt; T const &amp;&gt;()))), &quot;`boost::static_views::sequence_traits&lt;T&gt;::size(T const&amp;)` &quot; &quot;is not noexcept. It should be though, according to the &quot; &quot;Sequence concept. Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>SizeIsNoexcept</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(noexcept(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::size(std::declval&lt; T const &amp; &gt;())))</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::sequence_traits&lt;T&gt;::size(T const&amp;)` &quot; &quot;is not noexcept. It should be</type>
          <declname>though</declname>
        </param>
        <param>
          <type>according to the &quot; &quot;<ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref> concept.</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1ac6013697a00a0d60ca5825ff169b5028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(HasAt, T,(is_detected&lt; has_at_t, T &gt;::value), &quot;`boost::static_views::sequence_traits&lt;T&gt;` has no &quot; &quot;static member function `at(T, size_t)`. &quot; &quot;Availability of it is, unfortunately, required by &quot; &quot;the Sequence concept. Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>HasAt</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(is_detected&lt; <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1af10ba00020c096725c59b7fa46d97ed9" kindref="member">has_at_t</ref>, T &gt;::value)</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::sequence_traits&lt;T&gt;` has no &quot; &quot;static member function `at(T, size_t)`. &quot; &quot;Availability of it</type>
          <declname>is</declname>
        </param>
        <param>
          <type>unfortunately</type>
        </param>
        <param>
          <type>required by &quot; &quot;the <ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref> concept.</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1ab39421c45d6013d29d15dc204ccf618d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(AtIsNoexcept, T,(noexcept(sequence_traits&lt; T &gt;::at(std::declval&lt; T &gt;(), std::declval&lt; std::size_t &gt;()))), &quot;`boost::static_views::sequence_traits&lt;T&gt;::at(T, size_t)` &quot; &quot;is not noexcept. It should be though, according to the &quot; &quot;Sequence concept. Hence, the error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>AtIsNoexcept</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(noexcept(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::at(std::declval&lt; T &gt;(), std::declval&lt; std::size_t &gt;())))</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::sequence_traits&lt;T&gt;::at(T, size_t)` &quot; &quot;is not noexcept. It should be</type>
          <declname>though</declname>
        </param>
        <param>
          <type>according to the &quot; &quot;<ref refid="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1aabb1463650655085af1b23afe607501f" kindref="member">Sequence</ref> concept.</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceboost_1_1static__views_1_1concepts_1_1sequence_1a57ab95b24796ced025edd09a0e6bdc95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::static_views::concepts::sequence::BOOST_STATIC_VIEWS_DEFINE_CHECK</definition>
        <argsstring>(HasFixedSize, T,(sequence_traits&lt; T &gt;::extent() &gt;=0), &quot;`boost::static_views::sequence_traits&lt;T&gt;::extent() should &quot; &quot;return a non-negative number. It does not. Hence, the &quot; &quot;error.&quot;)</argsstring>
        <name>BOOST_STATIC_VIEWS_DEFINE_CHECK</name>
        <param>
          <type>HasFixedSize</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>(<ref refid="structboost_1_1static__views_1_1sequence__traits" kindref="compound">sequence_traits</ref>&lt; T &gt;::extent() &gt;=0)</type>
        </param>
        <param>
          <type>&quot;`boost::static_views::sequence_traits&lt;T&gt;::extent() should &quot; &quot;return a non-negative number. It does not.</type>
          <declname>Hence</declname>
        </param>
        <param>
          <type>the &quot; &quot;error.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="238" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/sequence_traits.hpp" line="101" column="1"/>
  </compounddef>
</doxygen>
