#          Copyright Tom Westerhout 2017.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import common ;
import feature ;
import modules ;
import notfile ;
import os ;
import path ;
import property-set ;
import regex ;
import type ;
import targets ;

# Directory of the Jamfile.
path-constant HERE : . ;

# Directory where benchmarking results are stored
.output-dir = [ path.native $(HERE)/results ] ;


# local rule init ( )
# {
#     if [ MATCH (--fake-run) : [ modules.peek : ARGV ] ]
#     {
#         local comm-file = [ MATCH "--comm-file=(.+)" 
#             : [ modules.peek : ARGV ] ] ;
#         comm-file = $(comm-file:E=".communication-file.txt") ;
# 
#         if [ os.name ] = NT {
#             .fake-shell = [ path.native $(HERE)/fake-shell-windows.sh ] 
#                 "$(comm-file)" % ;
#         }
#         else {
#             .fake-shell = [ path.native $(HERE)/fake-shell-unix.sh ]
#                 "$(comm-file)" % ;
#         }
# 
#         JAMSHELL = $(.fake-shell) ;
#     }
# 
#     for local m in
#         # This is a list of all modules that may execute commands. If another
#         # module executes commands with the wrong "shell", do not hestitate to
#         # add it to this list.
#         clang-darwin
#         clang-linux
#         clang-win
#         clang
#         common
#         gcc
#         msvc
#         testing
#     {
#         modules.poke $(m) : JAMSHELL : $(.fake-shell) ;
#     }
# 
#     JAMSHELL = $(.fake-shell) ;
#     return ;
# }
# 
# #
# #
# #
# rule setup-location ( properties * )
# {
#     local ps      = [ property-set.create $(properties) ] ;
#     local prefix  = [ $(ps).get <location-prefix> ] ;
#     if prefix = "" {
#         prefix = bin/$(prefix) ;
#     }
#     else {
#         prefix = bin ;
#     }
#     local os      = [ $(ps).get <host-os> ] ;
#     local toolset = [ $(ps).get <toolset> ] ;
#     local version = [ $(ps).get <toolset-$(toolset):version> ] ;
#     local p       = [ path.native $(prefix)/$(os)/$(toolset)-$(version) ] ;
#     return <location>$(p) ;
# }
# 
# project 
#     # : requirements 
#                    # [ init ]
#                    # <variant>release
#                    # <conditional>@setup-location
#     ;


# How it works
# ------------
#
# Boost.Build knows which commands to invoke with different compilers on
# different host operating systems. So it seems like a good idea to let b2
# compile the sources, and Python will measure the memory usage, do statistics
# and save the results.
#
# It is easy to invoke b2 from Python. What's difficult is to determine where b2
# stores the results without hardcoding the paths. From Boost.Build's FAQ:
#
# Q: How do I get the current value of feature in Jamfile?
# A: This is not possible, since Jamfile does not have "current" value of any
#    feature, be it toolset, build variant or anything else. ...
#
# To work around this we need a trick. If we want to know where target A will be
# saved to, we create a notfile rule A_fake with the same sources, requirements
# etc. as A. The generaring rule gets the requirements as an argument. From
# them, we can construct the property-set, and all the rest follows.
#



# ----------------------------- Preparation work ----------------------------- #


# Create a tool that measures memory usage of a command. We hard-code the output
# directory to make it easier for Python scripts to find the executable.
exe measure_memory : measure_memory.cpp
                   : <threading>multi <location>$(HERE)/tools
                   ;
explicit measure_memory ;


# ------------------------------- Benchmarks -------------------------------- #

#
# Filter out all key=value command line arguments, quote value and correctly
# escape everything such that python script can use these arguments to call b2
# with exact same settings as we've been called with.
#
rule get-command-line-settings ( )
{
    local args = [ modules.peek : ARGV ] ;
    local result ;

    for local x in $(args) {
        local matches = [ MATCH ([^=]+)=(.+) : $(x) ] ;
        if $(matches) {
            local key   = $(matches[1]) ;
            local value = $(matches[2-]:J=" ") ;
            result += "$(key)=\"$(value)\"" ;
        }
    }

    if $(result) = "" {
        return ;
    }
    else {
        result = $(result:J=" ") ;

        local .escape ;
        if [ os.name ] = NT {
            .escape = "^" ;
        }
        else {
            .escape = "\\" ;
        }
        result = [ regex.escape $(result) : "\"" : "$(.escape)" ] ;
        return $(result) ;
    }
}


# Calls $(test-name)/profile_memory.py script with correct arguments.
rule do-measure ( test-name : dummy * : requirements * )
{
    # Accumulator for arguments
    local args ;
    # Construct a property-set for ease of access to feature values
    local ps = [ property-set.create $(requirements) ] ;

    # Determine the toolset and version
    local toolset = [ $(ps).get <toolset> ] ;
    local version = [ $(ps).get <toolset-$(toolset):version> ] ;

    args += "--toolset $(toolset)-$(version)" ;
    args += "--debug" ;
    args += "--root $(HERE)" ;
    args += "--output $(.output-dir)" ;

    local boost-root    = [ modules.peek : BOOST_ROOT ] ;
    local b2-executable = [ path.native $(boost-root)/b2 ] ;
    local b2-options    = [ get-command-line-settings ] ;
    args += "--b2 \"$(b2-executable) $(b2-options)\"" ;

    # $(X:G=) ungrists, i.e. '<something>a' becomes 'a'. Targets are not passed
    # as a string but rather as an object of some target type. We have no
    # interest in this type, hence we remove this info by ungristing.
    local tool = $(HERE)/$(test-name:G=)/profile_memory.py ;

    # Combine arguments into a single string.
    ARGS    = $(args:J=" ") ;
    COMMAND = $(tool) ;
    return ;
}

actions do-measure
{
    $(COMMAND) $(ARGS)
}


# ---------------------------------- Sort ----------------------------------- #

# Both the "compilation rule" and the "measuring rule" should be passed the same
# requirements to avoid confusion. We thus define a variable to reduce code
# bloat.
local .sort-requirements = 
    # Without this flag, Clang chokes at larger inputs
    <toolset>clang:<cxxflags>"-fconstexpr-steps=10000000" ;

# The actual rule that whose execution will be measured. It is not required to
# be an exe rule, i.e. may be for example obj if we're only interested in
# compilation.
exe sort/sort_array : sort/sort_array.cpp : $(.sort-requirements) ;
explicit sort/sort_array ;
alias compile-sort : sort/sort_array ;
explicit compile-sort ;
notfile sort : @do-measure : measure_memory : $(.sort-requirements) ;

